{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy.stats as stats\n",
    "from scipy import spatial\n",
    "from scipy import signal\n",
    "from scipy import misc\n",
    "import statsmodels.api as sm\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import normalize\n",
    "from sklearn import linear_model\n",
    "from sklearn.linear_model import RANSACRegressor\n",
    "from sklearn.datasets import make_regression\n",
    "from sklearn.model_selection import KFold, train_test_split\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "#Import house dataset\n",
    "house = pd.read_csv('pp-complete.csv',header=None)\n",
    "\n",
    "#Check everything is in place\n",
    "print(house.shape)\n",
    "house.head()\n",
    "\n",
    "#Import airbnb listing dataset\n",
    "file   = pd.read_csv('listings.csv',dtype={'weekly_price':str,'monthly_price':str,'license':str,'jurisdiction_names':str})\n",
    "\n",
    "#Drop irrelevant columns \n",
    "airbnb = file.loc[0:,['id', 'name','neighbourhood_cleansed', 'city', 'zipcode', 'smart_location', 'property_type',\n",
    "                    'room_type', 'accommodates', 'price','weekly_price', 'monthly_price', 'security_deposit',\n",
    "                    'cleaning_fee', 'extra_people','first_review','last_review']]\n",
    "\n",
    "#Drop empty cells with no last review date as this column will be taken for the time stamp\n",
    "airbnb = airbnb.dropna(subset=['last_review'])\n",
    "\n",
    "#Check if everything is in place\n",
    "print(airbnb.shape)\n",
    "airbnb.head()\n",
    "\n",
    "#Change the data type\n",
    "airbnb[['price','weekly_price','monthly_price','security_deposit','cleaning_fee',\n",
    "        'extra_people']]= airbnb[['price','weekly_price','monthly_price','security_deposit','cleaning_fee',\n",
    "                                 'extra_people']].replace('[\\$,]','',regex=True).astype(float)\n",
    "\n",
    "#Convert dollar to pound\n",
    "airbnb[['price','weekly_price','monthly_price']]=airbnb[['price','weekly_price','monthly_price']]*0.78\n",
    "\n",
    "#Find the average days of weekly and monthly price columns\n",
    "weekly_avg  = (airbnb['weekly_price']/airbnb['price']).mean()\n",
    "monthly_avg = (airbnb['monthly_price']/airbnb['price']).mean()\n",
    "\n",
    "print(weekly_avg,monthly_avg)\n",
    "\n",
    "#Fill in the missing values with the average days\n",
    "airbnb['weekly_price']  = airbnb['weekly_price'].fillna(airbnb['price']*weekly_avg)\n",
    "airbnb['monthly_price'] = airbnb['monthly_price'].fillna(airbnb['price']*monthly_avg)\n",
    "\n",
    "#Calculate the yearly price based on the given monthly price \n",
    "Price_airbnb_original = airbnb['monthly_price']*12\n",
    "airbnb.insert(17,'Price_airbnb_original',Price_airbnb_original)\n",
    "\n",
    "#Create new columns of average 365 days a year\n",
    "Price_airbnb_cal = airbnb['price']*365\n",
    "airbnb.insert(18,'Price_airbnb_cal',Price_airbnb_cal)\n",
    "\n",
    "#Create new columns of total prices which include other fees\n",
    "airbnb['cleaning_fee'] = airbnb['cleaning_fee'].fillna(0)\n",
    "\n",
    "total_airbnb_original = airbnb['Price_airbnb_original']+airbnb['cleaning_fee']*365\n",
    "airbnb.insert(19,'Total_airbnb_original',total_airbnb_original)\n",
    "\n",
    "total_airbnb_cal = airbnb['Price_airbnb_cal']+airbnb['cleaning_fee']*365\n",
    "airbnb.insert(20,'Total_airbnb_cal',total_airbnb_cal)\n",
    "\n",
    "print(airbnb.head())\n",
    "\n",
    "#Drop rows with no price values\n",
    "null_price = airbnb.loc[airbnb['price']==0]\n",
    "null_price['neighbourhood_cleansed'].value_counts()\n",
    "\n",
    "#There are only 15 rows with missing price values, these will be dropped\n",
    "airbnb = airbnb[airbnb['price']!= 0]\n",
    "\n",
    "print(airbnb.shape)\n",
    "\n",
    "#Change the format of date\n",
    "airbnb['first_review'] = pd.to_datetime(airbnb['first_review'],format='%Y-%m-%d')\n",
    "#airbnb['first_review'] = pd.to_datetime(airbnb['first_review'])\n",
    "\n",
    "airbnb['last_review']  = pd.to_datetime(airbnb['last_review'],format='%Y-%m-%d')\n",
    "#airbnb['last_review']  = pd.to_datetime(airbnb['last_review'])\n",
    "\n",
    "#Sort the dates from the oldest to newest\n",
    "airbnb = airbnb.sort_values(by=['last_review'],ascending=[True])\n",
    "airbnb.head()\n",
    "\n",
    "#Set 'last_review' as the index for the airbnb dataset to allow temporal analysis   \n",
    "airbnb.set_index(airbnb['last_review'],inplace=True)\n",
    "\n",
    "# Inspect the temporal distribution by year\n",
    "yearly_count = airbnb.resample('Y').count()[['last_review']]\n",
    "\n",
    "# Visualize the evolution\n",
    "plt.figure(figsize = (15, 5))\n",
    "sns.barplot(yearly_count.index, yearly_count.values.flatten())\n",
    "plt.xlabel('Date by Year')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "plt.title('Yearly Evolution of the Number of Airbnb Listings')\n",
    "plt.xticks(rotation=90)\n",
    "plt.tight_layout()\n",
    "\n",
    "# Visualise the number of airbnb per london borough\n",
    "plt.hist(airbnb['neighbourhood_cleansed'],bins=32,rwidth=0.8,color='black',align='left')\n",
    "plt.title('Number of Airbnb Listings per London Borough')\n",
    "plt.xlabel('Borough of London')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "plt.xticks(rotation=90)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Visualise the number of airbnb property types \n",
    "plt.hist(airbnb['property_type'],bins=40,rwidth=0.8,color='black',log=True,align='left')\n",
    "plt.xlabel('Property Types')\n",
    "plt.ylabel('Number of Property Types')\n",
    "plt.title('Number of Airbnb Property Types')\n",
    "plt.xticks(rotation=90)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Visualise the number of airbnb room types\n",
    "plt.hist(airbnb['room_type'],color='black',align='left')\n",
    "plt.title('Number of Airbnb Room Type ')\n",
    "plt.xlabel('Room Types')\n",
    "plt.ylabel('Number of Room Types')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Creat a new file to avoid overlapping\n",
    "airbnb1 = airbnb\n",
    "\n",
    "#Extract the year and month from the date column\n",
    "airbnb1['YearMonth'] = airbnb1['last_review'].map(lambda x: 100*x.year + x.month)\n",
    "\n",
    "#Extract the first part (postcode districts) from Postcodes \n",
    "airbnb1['Postcode'] = airbnb1['zipcode'].str[0:3]\n",
    "\n",
    "#Group the postcode and year columns and reset idex\n",
    "airbnb1 = airbnb1.groupby(['YearMonth','Postcode']).mean().reset_index()\n",
    "\n",
    "#Drop further irrelevant columns\n",
    "airbnb1 = airbnb1.drop(columns=['id','accommodates','weekly_price','monthly_price','security_deposit','cleaning_fee','extra_people'])\n",
    "\n",
    "#Rearrange the columns\n",
    "airbnb1 = airbnb1[['Price_airbnb_original','Price_airbnb_cal','Total_airbnb_original','Total_airbnb_cal','Postcode','YearMonth']]\n",
    "\n",
    "print(airbnb1.shape)\n",
    "print(airbnb1.head())\n",
    "\n",
    "#Remove special characters and symbols in the Postcode column \n",
    "def preprocess(Postcode):\n",
    "    Postcode = Postcode.str.upper()\n",
    "    Postcode = Postcode.dropna()\n",
    "    Postcode = Postcode.str.replace('[','')\n",
    "    Postcode = Postcode.str.replace('â‚¬','')\n",
    "    Postcode = Postcode.str.replace('.','')\n",
    "    Postcode = Postcode.str.replace('$', '')\n",
    "    return(Postcode)\n",
    "\n",
    "#Extract the first part (postcode district) from postcodes\n",
    "airbnb1['Postcode'] = preprocess(airbnb1['Postcode'])\n",
    "\n",
    "airbnb1 = airbnb1[~airbnb1['Postcode'].astype(str).str.startswith('1')]\n",
    "airbnb1 = airbnb1[~airbnb1['Postcode'].astype(str).str.startswith('3')]  \n",
    "\n",
    "#Spliting the Postcode areas into East, West, North, North Weset, South East, South West, Central and Outer\n",
    "East_airbnb = airbnb1[airbnb1['Postcode'].str[0]=='E']\n",
    "East_airbnb = East_airbnb[East_airbnb['Postcode'].str[1]!='C']\n",
    "East_airbnb = East_airbnb[East_airbnb['Postcode'].str[1]!='N']\n",
    "\n",
    "if East_airbnb['Postcode'].all()<='E18':\n",
    "    East_airbnb['Postcode'] = East_airbnb['Postcode']\n",
    "else: \n",
    "    East_airbnb['Postcode'] = East_airbnb['Postcode'].str[0:2]\n",
    "\n",
    "East_airbnb.reset_index()\n",
    "    \n",
    "West_airbnb   = airbnb1[airbnb1['Postcode'].str[0]=='W']\n",
    "West_airbnb   = West_airbnb[West_airbnb['Postcode'].str[1]!='C']\n",
    "\n",
    "if West_airbnb['Postcode'].all()<='W13':\n",
    "    West_airbnb['Postcode'] = West_airbnb['Postcode']\n",
    "else: \n",
    "    West_airbnb['Postcode'] = West_airbnb['Postcode'].str[0:2]\n",
    "\n",
    "West_airbnb.reset_index()\n",
    "\n",
    "North_airbnb = airbnb1[airbnb1['Postcode'].str[0]=='N']\n",
    "North_West_airbnb = North_airbnb[North_airbnb['Postcode'].str[1]=='W']\n",
    "North_airbnb = North_airbnb[North_airbnb['Postcode'].str[1]!='W']\n",
    "\n",
    "if North_airbnb['Postcode'].all()<='N22':\n",
    "    North_airbnb['Postcode'] = North_airbnb['Postcode']\n",
    "else: \n",
    "    North_airbnb['Postcode'] = North_airbnb['Postcode'].str[0:2]\n",
    "\n",
    "North_airbnb.reset_index()\n",
    "North_West_airbnb.reset_index()\n",
    "\n",
    "South_airbnb = airbnb1[airbnb1['Postcode'].str[0]=='S']    \n",
    "South_East_airbnb = South_airbnb[South_airbnb['Postcode'].str[1]=='E']\n",
    "South_West_airbnb = South_airbnb[South_airbnb['Postcode'].str[1]=='W']\n",
    "\n",
    "South_East_airbnb.reset_index()\n",
    "South_West_airbnb.reset_index()\n",
    "       \n",
    "Central_airbnb = airbnb1[airbnb1['Postcode'].str[1]=='C']\n",
    "\n",
    "Central_airbnb.reset_index()\n",
    "\n",
    "IG = airbnb1[airbnb1['Postcode'].str[0]=='I']\n",
    "RM = airbnb1[airbnb1['Postcode'].str[0]=='R']\n",
    "EN = airbnb1[airbnb1['Postcode'].str[1]=='N']\n",
    "DA = airbnb1[airbnb1['Postcode'].str[0]=='D']\n",
    "BR = airbnb1[airbnb1['Postcode'].str[0]=='B']\n",
    "CR = airbnb1[airbnb1['Postcode'].str[0]=='C']\n",
    "SM = airbnb1[airbnb1['Postcode'].str[1]=='M']\n",
    "KT = airbnb1[airbnb1['Postcode'].str[0]=='K']\n",
    "TW = airbnb1[airbnb1['Postcode'].str[0]=='T']\n",
    "UB = airbnb1[airbnb1['Postcode'].str[0]=='U']\n",
    "HA = airbnb1[airbnb1['Postcode'].str[0]=='H']\n",
    "WD = airbnb1[airbnb1['Postcode'].str[1]=='D']\n",
    "\n",
    "Outer_airbnb = pd.concat([IG,RM,EN,DA,BR,CR,SM,KT,TW,UB,HA,WD]).reset_index()\n",
    "\n",
    "#Top 10 East London Postcode Districts with most Airbnb Listings\n",
    "East_count = East_airbnb['Postcode'].value_counts()\n",
    "East_count = East_count[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(East_count.index,East_count.values,palette='Set2')\n",
    "plt.title('Top 10 East London Postcode Districts with most Airbnb Listings')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "\n",
    "#Top 10 West London Postcode Districts with most Airbnb Listings\n",
    "West_count = West_airbnb['Postcode'].value_counts()\n",
    "West_count = West_count[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(West_count.index,West_count.values,palette='Set2')\n",
    "plt.title('Top 10 West London Postcode Districts with most Airbnb Listings')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "\n",
    "#Top 10 North London Postcode Districts with most Airbnb Listings\n",
    "North_count = North_airbnb['Postcode'].value_counts()\n",
    "North_count = North_count[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(North_count.index,North_count.values,palette='Set2')\n",
    "plt.title('Top 10 North London Postcode Districts with most Airbnb Listings')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "\n",
    "#Top 10 North West London Postcode Districts with most Airbnb Listings\n",
    "NW_count = North_West_airbnb['Postcode'].value_counts()\n",
    "NW_count = NW_count[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(NW_count.index,NW_count.values,palette='Set2')\n",
    "plt.title('Top 10 North West London Postcode Districts with most Airbnb Listings')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "\n",
    "#Top 10 South East London Postcode Districts with most Airbnb Listings\n",
    "SE_count = South_East_airbnb['Postcode'].value_counts()\n",
    "SE_count = SE_count[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(SE_count.index,SE_count.values,palette='Set2')\n",
    "plt.title('Top 10 South East London Postcode Districts with most Airbnb Listings')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "\n",
    "#Top 10 South West London Postcode Districts with most Airbnb Listings\n",
    "SW_count = South_West_airbnb['Postcode'].value_counts()\n",
    "SW_count = SW_count[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(SW_count.index,SW_count.values,palette='Set2')\n",
    "plt.title('Top 10 South West London Postcode Districts with most Airbnb Listings')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "\n",
    "#Central London Postcode Districts with most Airbnb Listings\n",
    "Central_count = Central_airbnb['Postcode'].value_counts()\n",
    "Central_count = Central_count[:5,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(Central_count.index,Central_count.values,palette='Set2')\n",
    "plt.title('Central London Postcode Districts with most Airbnb Listings')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "\n",
    "#Top 10 Outer London Postcode Districts with most Airbnb Listings\n",
    "Outer_count = Outer_airbnb['Postcode'].value_counts()\n",
    "Outer_count = Outer_count[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(Outer_count.index,Outer_count.values,palette='Set2')\n",
    "plt.title('Top 10 Outer London Postcode Districts with most Airbnb Listings')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Airbnb Listings')\n",
    "\n",
    "#Drop irrelevant columns\n",
    "house.columns=['ID','Price_house','Time','Postcode','a','b','c','First','Number','Street','Locality','City','Area','County','A','A1']\n",
    "house = house.drop(columns={'ID','a','b','c','First','Number','Street','Locality','A','A1'})\n",
    "print(house.shape)\n",
    "print(house.head())\n",
    "\n",
    "#Filter the dataset to London only\n",
    "house = house.loc[house['County']=='GREATER LONDON']\n",
    "house = house.loc[house['City']=='LONDON']\n",
    "\n",
    "#Change the date format\n",
    "Clean_Time = pd.to_datetime(house['Time'],format='%Y-%m-%d %H:%M')\n",
    "house.insert(1,'Clean_Time',Clean_Time)\n",
    "\n",
    "#Create another dataframe to avoid overlapping\n",
    "house1 = house\n",
    "\n",
    "#Extract the year and month from date column\n",
    "house1['YearMonth'] = house1['Clean_Time'].map(lambda x: 100*x.year + x.month)\n",
    "\n",
    "#Extracting postcode districts \n",
    "house1['Postcode'] = house1['Postcode'].str[0:3]\n",
    "\n",
    "#Group the dataset by YearMonth and Postcode\n",
    "house1 = house1.groupby(['YearMonth','Postcode']).mean().reset_index()\n",
    "\n",
    "#Rearranging the columns\n",
    "house1 = house1[['YearMonth','Postcode','Price_house']]\n",
    "\n",
    "print(house1.shape)\n",
    "print(house1.head())\n",
    "\n",
    "#Extract the postocde ditricts from postcode\n",
    "house1['Postcode'] = preprocess(house1['Postcode'])\n",
    "\n",
    "#Spliting the Postcode areas into East, West, North, North Weset, South East, South West, Central \n",
    "#and Outer\n",
    "East_house = house1[house1['Postcode'].str[0]=='E']\n",
    "East_house = East_house[East_house['Postcode'].str[1]!='C']\n",
    "East_house = East_house[East_house['Postcode'].str[1]!='N']\n",
    "\n",
    "if East_house['Postcode'].all()<='E18':\n",
    "    East_house['Postcode'] = East_house['Postcode']\n",
    "else: \n",
    "    East_house['Postcode'] = East_house['Postcode'].str[0:2]\n",
    "\n",
    "East_house.reset_index()\n",
    "    \n",
    "West_house = house1[house1['Postcode'].str[0]=='W']\n",
    "West_house = West_house[West_house['Postcode'].str[1]!='C']\n",
    "\n",
    "if West_house['Postcode'].all()<='W13':\n",
    "    West_house['Postcode'] = West_house['Postcode']\n",
    "else: \n",
    "    West_house['Postcode'] = West_house['Postcode'].str[0:2]\n",
    "\n",
    "West_house.reset_index()\n",
    "\n",
    "North_house = house1[house1['Postcode'].str[0]=='N']\n",
    "North_West_house = North_house[North_house['Postcode'].str[1]=='W']\n",
    "North_house = North_house[North_house['Postcode'].str[1]!='W']\n",
    "\n",
    "if North_house['Postcode'].all()<='N22':\n",
    "    North_house['Postcode'] = North_house['Postcode']\n",
    "else: \n",
    "    North_house['Postcode'] = North_house['Postcode'].str[0:2]\n",
    "\n",
    "North_house.reset_index()\n",
    "North_West_house.reset_index()\n",
    "\n",
    "South_house = house1[house1['Postcode'].str[0]=='S']   \n",
    "\n",
    "South_East_house = South_house[South_house['Postcode'].str[1]=='E']\n",
    "South_West_house = South_house[South_house['Postcode'].str[1]=='W']\n",
    "\n",
    "South_East_house.reset_index()\n",
    "South_West_house.reset_index()\n",
    "       \n",
    "Central_house = house1[house1['Postcode'].str[1]=='C']\n",
    "\n",
    "Central_house.reset_index()\n",
    "\n",
    "IG = house1[house1['Postcode'].str[0]=='I']\n",
    "RM = house1[house1['Postcode'].str[0]=='R']\n",
    "EN = house1[house1['Postcode'].str[1]=='N']\n",
    "DA = house1[house1['Postcode'].str[0]=='D']\n",
    "BR = house1[house1['Postcode'].str[0]=='B']\n",
    "CR = house1[house1['Postcode'].str[0]=='C']\n",
    "SM = house1[house1['Postcode'].str[1]=='M']\n",
    "KT = house1[house1['Postcode'].str[0]=='K']\n",
    "TW = house1[house1['Postcode'].str[0]=='T']\n",
    "UB = house1[house1['Postcode'].str[0]=='U']\n",
    "HA = house1[house1['Postcode'].str[0]=='H']\n",
    "WD = house1[house1['Postcode'].str[1]=='D']\n",
    "\n",
    "Outer_house = pd.concat([IG,RM,EN,DA,BR,CR,SM,KT,TW,UB,HA,WD]).reset_index()\n",
    "\n",
    "#Set 'YearMonth' as the index for the airbnb dataset to allow temporal analysis   \n",
    "house.set_index(house['Clean_Time'],inplace=True)\n",
    "\n",
    "# Inspect the temporal distribution by year\n",
    "yearly_count1 = house.resample('Y').count()[['Clean_Time']]\n",
    "\n",
    "# Visualize the evolution\n",
    "plt.figure(figsize = (15, 5))\n",
    "sns.barplot(yearly_count1.index, yearly_count1.values.flatten())\n",
    "plt.xlabel('Date by Year')\n",
    "plt.ylabel('Number of Houses')\n",
    "plt.title('Yearly Evolution of the Number of Houses')\n",
    "plt.xticks(rotation=90)\n",
    "plt.tight_layout()\n",
    "\n",
    "#Top 10 East London Postcode Districs with most Houses\n",
    "East_count_house = East_house['Postcode'].value_counts()\n",
    "East_count_house = East_count_house[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(East_count_house.index,East_count_house.values,palette='Set2')\n",
    "plt.title('Top 10 East London Postcode Districs with most Houses')\n",
    "plt.xlabel('London Postcode Districs')\n",
    "plt.ylabel('Number of Houses')\n",
    "\n",
    "#Top 10 West London Postcode District with most Houses\n",
    "West_count_house = West_house['Postcode'].value_counts()\n",
    "West_count_house = West_count_house[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(West_count_house.index,West_count_house.values,palette='Set2')\n",
    "plt.title('Top 10 West London Postcode District with most Houses')\n",
    "plt.xlabel('London Postcode Districts')\n",
    "plt.ylabel('Number of Houses')\n",
    "\n",
    "#Top 10 North London Postcode Districts with most Houses\n",
    "North_count_house = North_house['Postcode'].value_counts()\n",
    "North_count_house = North_count_house[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(North_count_house.index,North_count_house.values,palette='Set2')\n",
    "plt.title('Top 10 North London Postcode Districts with most Houses')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Houses')\n",
    "\n",
    "#Top 10 North West London Postcode Districts with most Houses\n",
    "NW_count_house = North_West_house['Postcode'].value_counts()\n",
    "NW_count_house = NW_count_house[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(NW_count_house.index,NW_count_house.values,palette='Set2')\n",
    "plt.title('Top 10 North West London Postcode Districts with most Houses')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Houses')\n",
    "\n",
    "#Top 10 South West London Postcode Districts with most Houses\n",
    "SW_count_house = South_West_house['Postcode'].value_counts()\n",
    "SW_count_house = SW_count_house[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(SW_count_house.index,SW_count_house.values,palette='Set2')\n",
    "plt.title('Top 10 South West London Postcode Districts with most Houses')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Houses')\n",
    "\n",
    "#Top 10 South East London Postcode Districts with most Houses\n",
    "SE_count_house = South_East_house['Postcode'].value_counts()\n",
    "SE_count_house = SE_count_house[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(SE_count_house.index,SE_count_house.values,palette='Set2')\n",
    "plt.title('Top 10 South East London Postcode Districts with most Houses')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Houses')\n",
    "\n",
    "#Top 10 Central London Postcode Districts with most Houses\n",
    "Central_count_house = Central_house['Postcode'].value_counts()\n",
    "Central_count_house = Central_count_house[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(Central_count_house.index,Central_count_house.values,palette='Set2')\n",
    "plt.title('Top 10 Central London Postcode Districts with most Houses')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Houses')\n",
    "\n",
    "#Top 10 Outer London Postcode Districts with most Houses\n",
    "Outer_count_house = Outer_house['Postcode'].value_counts()\n",
    "Outer_count_house = Outer_count_house[:10,]\n",
    "plt.figure(figsize=(15,6))\n",
    "sns.barplot(Outer_count_house.index,Outer_count_house.values,palette='Set2')\n",
    "plt.title('Top 10 Outer London Postcode Districts with most Houses')\n",
    "plt.xlabel('London Postcode District')\n",
    "plt.ylabel('Number of Houses')\n",
    "\n",
    "#Merge two datasets on Year and Postcode \n",
    "merged = pd.merge(house1,airbnb1,how='outer',on=['YearMonth','Postcode'])\n",
    "\n",
    "#Sort both columns \n",
    "merged = merged.sort_values(by=['Postcode','YearMonth'],ascending=[True,True]).reset_index()\n",
    "\n",
    "#Rearrange columns\n",
    "merged = merged[['YearMonth','Postcode','Price_house','Price_airbnb_original','Price_airbnb_cal','Total_airbnb_original','Total_airbnb_cal']]\n",
    "print(merged)\n",
    "\n",
    "#Set YearMonth as the datetime index of the merged dataset \n",
    "datetime_series = pd.to_datetime(merged['YearMonth'].astype(str), format='%Y%m')\n",
    "datetime_index = pd.DatetimeIndex(datetime_series.values)\n",
    "merged1 = merged.set_index(datetime_index)\n",
    "merged1 = merged1.drop('YearMonth',axis=1)\n",
    "print(merged1)\n",
    "\n",
    "#Drop missing rows with both house prices and airbnb prices\n",
    "merged1 = merged1.dropna()\n",
    "\n",
    "#Sort the index from oldest to newest\n",
    "merged1 = merged1.sort_index()\n",
    "print(merged1)\n",
    "\n",
    "#Split the Postcode areas into East, West, North, North Weset, South East, South West, Central and Outer\n",
    "East_merged   = merged1[merged1['Postcode'].str[0]=='E']\n",
    "East_merged   = East_merged[East_merged['Postcode'].str[1]!='C']\n",
    "East_merged   = East_merged[East_merged['Postcode'].str[1]!='N']\n",
    "\n",
    "if East_merged['Postcode'].all()<='E18':\n",
    "    East_merged['Postcode'] = East_merged['Postcode']\n",
    "else: \n",
    "    East_merged['Postcode'] = East_merged['Postcode'].str[0:2]\n",
    "\n",
    "East_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "    \n",
    "West_merged   = merged1[merged1['Postcode'].str[0]=='W']\n",
    "West_merged   = West_merged[West_merged['Postcode'].str[1]!='C']\n",
    "\n",
    "West_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "\n",
    "North_merged = merged1[merged1['Postcode'].str[0]=='N']\n",
    "North_West_merged = North_merged[North_merged['Postcode'].str[1]=='W']\n",
    "North_merged = North_merged[North_merged['Postcode'].str[1]!='W']\n",
    "\n",
    "North_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "North_West_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "\n",
    "South_merged = merged1[merged1['Postcode'].str[0]=='S']    \n",
    "South_East_merged = South_merged[South_merged['Postcode'].str[1]=='E']\n",
    "South_West_merged = South_merged[South_merged['Postcode'].str[1]=='W']\n",
    "\n",
    "South_East_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "South_West_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "       \n",
    "Central_merged = merged1[merged1['Postcode'].str[1]=='C']\n",
    "\n",
    "Central_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "\n",
    "IG = merged1[merged1['Postcode'].str[0]=='I']\n",
    "RM = merged1[merged1['Postcode'].str[0]=='R']\n",
    "EN = merged1[merged1['Postcode'].str[1]=='N']\n",
    "DA = merged1[merged1['Postcode'].str[0]=='D']\n",
    "BR = merged1[merged1['Postcode'].str[0]=='B']\n",
    "CR = merged1[merged1['Postcode'].str[0]=='C']\n",
    "SM = merged1[merged1['Postcode'].str[1]=='M']\n",
    "KT = merged1[merged1['Postcode'].str[0]=='K']\n",
    "TW = merged1[merged1['Postcode'].str[0]=='T']\n",
    "UB = merged1[merged1['Postcode'].str[0]=='U']\n",
    "HA = merged1[merged1['Postcode'].str[0]=='H']\n",
    "WD = merged1[merged1['Postcode'].str[1]=='D']\n",
    "\n",
    "Outer_merged = pd.concat([IG,RM,EN,DA,BR,CR,SM,KT,TW,UB,HA,WD]).reset_index()\n",
    "\n",
    "print(len(East_merged)+len(West_merged)+len(North_merged)+len(North_West_merged)+\n",
    "     len(South_West_merged)+len(South_East_merged)+len(Central_merged)+len(Outer_merged))\n",
    "\n",
    "#Average London House Prices per Postcode District\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=merged1['Postcode'],y=merged1['Price_house'],palette='vlag')\n",
    "plt.xticks(rotation=65,horizontalalignment='right')\n",
    "plt.title('Average London House Prices per Postcode District')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Average London Airbnb Listing Price (original)per Postcode District\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=merged1['Postcode'],y=merged1['Price_airbnb_original'],palette='rocket')\n",
    "plt.xticks(rotation=65,horizontalalignment='right')\n",
    "plt.title('Average London Airbnb Listing Price (original)per Postcode District')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Average London Airbnb Listing Price (calculated) per Postcode District\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=merged1['Postcode'],y=merged1['Price_airbnb_cal'],palette='rocket')\n",
    "plt.xticks(rotation=65,horizontalalignment='right')\n",
    "plt.title('Average London Airbnb Listing Price (calculated) per Postcode District')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Visualise average house and aribnb listing prices in East London\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=East_merged['Postcode'],y=East_merged['Price_house'],palette='vlag')\n",
    "plt.title('Average House Price in East London')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=East_merged['Postcode'],y=East_merged['Price_airbnb_original'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Original) in East London')\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=East_merged['Postcode'],y=East_merged['Price_airbnb_cal'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Calculated) in East London')\n",
    "plt.tight_layout()\n",
    "\n",
    "#Visualise average house and aribnb listing prices in West London\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=West_merged['Postcode'],y=West_merged['Price_house'],palette='vlag')\n",
    "plt.title('Average House Price in West London')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=West_merged['Postcode'],y=West_merged['Price_airbnb_original'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Original) in West London')\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=West_merged['Postcode'],y=West_merged['Price_airbnb_cal'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Calculated) in West London')\n",
    "plt.tight_layout()\n",
    "\n",
    "#Visualise average house and aribnb listing prices in North London\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=North_merged['Postcode'],y=North_merged['Price_house'],palette='vlag')\n",
    "plt.title('Average House Price in North London')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=North_merged['Postcode'],y=North_merged['Price_airbnb_original'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Original)in North London')\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=North_merged['Postcode'],y=North_merged['Price_airbnb_cal'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Calculated) in North London')\n",
    "plt.tight_layout()\n",
    "\n",
    "#Visualise average house and aribnb listing prices in North West London\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=North_West_merged['Postcode'],y=North_West_merged['Price_house'],palette='vlag')\n",
    "plt.title('Average House Price in North West London')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=North_West_merged['Postcode'],y=North_West_merged['Price_airbnb_original'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Original) in North West London')\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=North_West_merged['Postcode'],y=North_West_merged['Price_airbnb_cal'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Calculated) in North West London')\n",
    "plt.tight_layout()\n",
    "\n",
    "#Visualise average house and aribnb listing prices in South West London\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=South_West_merged['Postcode'],y=South_West_merged['Price_house'],palette='vlag')\n",
    "plt.title('Average Hous3 Price in South West London')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=South_West_merged['Postcode'],y=South_West_merged['Price_airbnb_original'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Original) in South West London')\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=South_West_merged['Postcode'],y=South_West_merged['Price_airbnb_cal'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Calculated) in South West London')\n",
    "plt.tight_layout()\n",
    "\n",
    "#Visualise average house and aribnb listing prices in South East London\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=South_East_merged['Postcode'],y=South_East_merged['Price_house'],palette='vlag')\n",
    "plt.title('Average House Price in South East London')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=South_East_merged['Postcode'],y=South_East_merged['Price_airbnb_original'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Original) in South East London')\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=South_East_merged['Postcode'],y=South_East_merged['Price_airbnb_cal'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Calculated) in South East London')\n",
    "plt.tight_layout()\n",
    "\n",
    "#Visualise average house and aribnb listing prices in Central London\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=Central_merged['Postcode'],y=Central_merged['Price_house'],palette='vlag')\n",
    "plt.title('Average House Price in Central London')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=Central_merged['Postcode'],y=Central_merged['Price_airbnb_original'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Original)in Central London')\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.figure(figsize=(15,8))\n",
    "sns.barplot(x=Central_merged['Postcode'],y=Central_merged['Price_airbnb_cal'],palette='vlag')\n",
    "plt.title('Average Airbnb Listing Price (Calculated) in Central London')\n",
    "plt.tight_layout()\n",
    "\n",
    "#Visualise the datasets with histograms to see if log transformation is needed\n",
    "plt.hist(merged1['Price_house'])\n",
    "plt.title('Price_house')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.hist(merged1['Total_airbnb_original'])\n",
    "plt.title('Total_airbnb_original')\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.hist(merged1['Total_airbnb_cal'])\n",
    "plt.title('Total_airbnb_cal')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.hist(merged1['Price_airbnb_original'])\n",
    "plt.title('Price_airbnb_original')\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.hist(merged1['Price_airbnb_cal'])\n",
    "plt.title('Price_airbnb_cal')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Applying log transformation\n",
    "merged1['Price_house'].apply(np.log).hist(label='Price House')\n",
    "merged1['Total_airbnb_original'].apply(np.log).hist(label='Total Price Airbnb Original')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "merged1['Price_house'].apply(np.log).hist(label='Price House')\n",
    "merged1['Total_airbnb_cal'].apply(np.log).hist(label='Total Price Airbnb Calculated')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "merged1['Price_house'].apply(np.log).hist(label='Price House')\n",
    "merged1['Price_airbnb_original'].apply(np.log).hist(label='Price Airbnb Original')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "merged1['Price_house'].apply(np.log).hist(label='Price House')\n",
    "merged1['Price_airbnb_cal'].apply(np.log).hist(label='Price Airbnb Calculated')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "#Insert log transformed columns to the dataframe\n",
    "log_Price_house           = np.log(merged1.Price_house)\n",
    "log_Price_airbnb_original = np.log(merged1.Price_airbnb_original)\n",
    "log_Price_airbnb_cal      = np.log(merged1.Price_airbnb_cal)\n",
    "log_Total_airbnb_original = np.log(merged1.Total_airbnb_original)\n",
    "log_Total_airbnb_cal      = np.log(merged1.Total_airbnb_cal)\n",
    "\n",
    "merged1.insert(2,'log_Price_house',log_Price_house)\n",
    "merged1.insert(4,'log_Price_airbnb_original',log_Price_airbnb_original)\n",
    "merged1.insert(6,'log_Price_airbnb_cal',log_Price_airbnb_cal)\n",
    "merged1.insert(8,'log_Total_airbnb_original',log_Total_airbnb_original)\n",
    "merged1.insert(10,'log_Total_airbnb_cal',log_Total_airbnb_cal)\n",
    "\n",
    "print(merged1.head())\n",
    "\n",
    "#Applying log transformation to each postcode districts\n",
    "East_merged   = merged1[merged1['Postcode'].str[0]=='E']\n",
    "East_merged   = East_merged[East_merged['Postcode'].str[1]!='C']\n",
    "East_merged   = East_merged[East_merged['Postcode'].str[1]!='N']\n",
    "\n",
    "if East_merged['Postcode'].all()<='E18':\n",
    "    East_merged['Postcode'] = East_merged['Postcode']\n",
    "else: \n",
    "    East_merged['Postcode'] = East_merged['Postcode'].str[0:2]\n",
    "\n",
    "East_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "    \n",
    "West_merged   = merged1[merged1['Postcode'].str[0]=='W']\n",
    "West_merged   = West_merged[West_merged['Postcode'].str[1]!='C']\n",
    "\n",
    "West_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "\n",
    "North_merged = merged1[merged1['Postcode'].str[0]=='N']\n",
    "North_West_merged = North_merged[North_merged['Postcode'].str[1]=='W']\n",
    "North_merged = North_merged[North_merged['Postcode'].str[1]!='W']\n",
    "\n",
    "North_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "North_West_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "\n",
    "South_merged = merged1[merged1['Postcode'].str[0]=='S']    \n",
    "South_East_merged = South_merged[South_merged['Postcode'].str[1]=='E']\n",
    "South_West_merged = South_merged[South_merged['Postcode'].str[1]=='W']\n",
    "\n",
    "South_East_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "South_West_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "       \n",
    "Central_merged = merged1[merged1['Postcode'].str[1]=='C']\n",
    "\n",
    "Central_merged.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "\n",
    "IG = merged1[merged1['Postcode'].str[0]=='I']\n",
    "RM = merged1[merged1['Postcode'].str[0]=='R']\n",
    "EN = merged1[merged1['Postcode'].str[1]=='N']\n",
    "DA = merged1[merged1['Postcode'].str[0]=='D']\n",
    "BR = merged1[merged1['Postcode'].str[0]=='B']\n",
    "CR = merged1[merged1['Postcode'].str[0]=='C']\n",
    "SM = merged1[merged1['Postcode'].str[1]=='M']\n",
    "KT = merged1[merged1['Postcode'].str[0]=='K']\n",
    "TW = merged1[merged1['Postcode'].str[0]=='T']\n",
    "UB = merged1[merged1['Postcode'].str[0]=='U']\n",
    "HA = merged1[merged1['Postcode'].str[0]=='H']\n",
    "WD = merged1[merged1['Postcode'].str[1]=='D']\n",
    "\n",
    "Outer_merged = pd.concat([IG,RM,EN,DA,BR,CR,SM,KT,TW,UB,HA,WD]).reset_index()\n",
    "\n",
    "f, ax = plt.subplots(1, 2)\n",
    "ax[0].boxplot(merged1['Price_house'])\n",
    "ax[1].hist(merged1['Price_house'])\n",
    "plt.xticks(rotation=65)\n",
    "plt.tight_layout()\n",
    "\n",
    "print('mean:', merged1['Price_house'].mean(),'median:', merged1['Price_house'].median(),\n",
    "      '\\n std:', merged1['Price_house'].std(),'iqr:', stats.iqr(merged1['Price_house']),\n",
    "      '\\n std:', merged1['Price_house'].std(),'mad:', sm.robust.scale.mad(merged1['Price_house']))\n",
    "\n",
    "f, ax = plt.subplots(1, 2)\n",
    "ax[0].boxplot(merged1['Price_airbnb_original'])\n",
    "ax[1].hist(merged1['Price_airbnb_original'])\n",
    "plt.xticks(rotation=65)\n",
    "plt.tight_layout()\n",
    "\n",
    "print('mean:', merged1['Price_airbnb_original'].mean(),'median:', merged1['Price_airbnb_original'].median(),\n",
    "      '\\n std:', merged1['Price_airbnb_original'].std(),'iqr:', stats.iqr(merged1['Price_airbnb_original']),\n",
    "      '\\n std:', merged1['Price_airbnb_original'].std(),'mad:', sm.robust.scale.mad(merged1['Price_airbnb_original']))\n",
    "\n",
    "f, ax = plt.subplots(1, 2)\n",
    "ax[0].boxplot(merged1['Price_airbnb_cal'])\n",
    "ax[1].hist(merged1['Price_airbnb_cal'])\n",
    "plt.xticks(rotation=65)\n",
    "plt.tight_layout()\n",
    "\n",
    "print('mean:', merged1['Price_airbnb_cal'].mean(),'median:', merged1['Price_airbnb_cal'].median(),\n",
    "      '\\n std:', merged1['Price_airbnb_cal'].std(),'iqr:', stats.iqr(merged1['Price_airbnb_cal']),\n",
    "      '\\n std:', merged1['Price_airbnb_cal'].std(),'mad:', sm.robust.scale.mad(merged1['Price_airbnb_cal']))\n",
    "\n",
    "f, ax = plt.subplots(1, 2)\n",
    "ax[0].boxplot(merged1['Total_airbnb_original'])\n",
    "ax[1].hist(merged1['Total_airbnb_original'])\n",
    "plt.xticks(rotation=65)\n",
    "plt.tight_layout()\n",
    "\n",
    "print('mean:', merged1['Total_airbnb_original'].mean(),'median:', merged1['Total_airbnb_original'].median(),\n",
    "      '\\n std:', merged1['Total_airbnb_original'].std(),'iqr:', stats.iqr(merged1['Total_airbnb_original']),\n",
    "      '\\n std:', merged1['Total_airbnb_original'].std(),'mad:', sm.robust.scale.mad(merged1['Total_airbnb_original']))\n",
    "\n",
    "f, ax = plt.subplots(1, 2)\n",
    "ax[0].boxplot(merged1['Total_airbnb_cal'])\n",
    "ax[1].hist(merged1['Total_airbnb_cal'])\n",
    "plt.xticks(rotation=65)\n",
    "plt.tight_layout()\n",
    "\n",
    "print('mean:', merged1['Total_airbnb_cal'].mean(),'median:', merged1['Total_airbnb_cal'].median(),\n",
    "      '\\n std:', merged1['Total_airbnb_cal'].std(),'iqr:', stats.iqr(merged1['Total_airbnb_cal']),\n",
    "      '\\n std:', merged1['Total_airbnb_cal'].std(),'mad:', sm.robust.scale.mad(merged1['Total_airbnb_cal']))\n",
    "\n",
    "#Visualise a simple correlation between log transformed house prices and airbnb prices comparing\n",
    "#with non log transformed datasets\n",
    "sns.lmplot(x='log_Total_airbnb_original',y='log_Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Log Transfomred Total Airbnb Price vs House Price (Original)')\n",
    "sns.lmplot(x='Total_airbnb_original',y='Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb Price vs House Price (Original)')\n",
    "\n",
    "#Visualise a simple correlation between log transformed house prices and airbnb prices comparing\n",
    "#with non log transformed datasets\n",
    "sns.lmplot(x='log_Total_airbnb_cal',y='log_Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Log Transfomred Total Airbnb Price vs House Price (Calculated)')\n",
    "sns.lmplot(x='Total_airbnb_cal',y='Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb Price vs House Price (Calculated)')\n",
    "\n",
    "sns.lmplot(x='log_Price_airbnb_original',y='log_Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Log Transformed Airbnb Price vs House Price (Original)')\n",
    "sns.lmplot(x='Price_airbnb_original',y='Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb Price vs House Price (Original)')\n",
    "\n",
    "sns.lmplot(x='log_Price_airbnb_cal',y='log_Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Log Transformed Airbnb Price vs House Price (Calculated)')\n",
    "sns.lmplot(x='Price_airbnb_cal',y='Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb Price vs House Price (Calculated)')\n",
    "\n",
    "#1D outliers for each individual columns are already shown above, now 2D outliers will be shown \n",
    "#by comparing HP and ALP. \n",
    "#Calculate the mean and the std of each feature and identify the outliers\n",
    "mean_house                 = merged1['log_Price_house'].mean()\n",
    "mean_airbnb_original       = merged1['log_Price_airbnb_original'].mean()\n",
    "mean_airbnb_cal            = merged1['log_Price_airbnb_cal'].mean()\n",
    "mean_total_airbnb_original = merged1['log_Total_airbnb_original'].mean()\n",
    "mean_total_airbnb_cal      = merged1['log_Total_airbnb_cal'].mean()\n",
    "\n",
    "std_house                  = merged1['log_Price_house'].std()\n",
    "std_airbnb_original        = merged1['log_Price_airbnb_original'].std()\n",
    "std_airbnb_cal             = merged1['log_Price_airbnb_cal'].std()\n",
    "std_total_airbnb_original  = merged1['log_Total_airbnb_original'].std()\n",
    "std_total_airbnb_cal       = merged1['log_Total_airbnb_cal'].std()\n",
    "\n",
    "is_outlier_house                 = np.where(abs(merged1['log_Price_house'] - mean_house) > 2 * std_house,\n",
    "                                            1, 0)\n",
    "is_outlier_airbnb_original       = np.where(abs(merged1['log_Price_airbnb_original'] - mean_airbnb_original) \n",
    "                                            > 2 * std_airbnb_original, 1, 0)\n",
    "is_outlier_airbnb_cal            = np.where(abs(merged1['log_Price_airbnb_cal'] - mean_airbnb_cal) \n",
    "                                            > 2 * std_airbnb_cal, 1, 0)\n",
    "is_outlier_total_airbnb_original = np.where(abs(merged1['log_Total_airbnb_original'] - mean_total_airbnb_original) \n",
    "                                            > 2 * std_total_airbnb_original, 1, 0)\n",
    "is_outlier_total_airbnb_cal      = np.where(abs(merged1['log_Total_airbnb_cal'] - mean_total_airbnb_cal) \n",
    "                                            > 2 * std_total_airbnb_cal, 1, 0)\n",
    "\n",
    "merged1.insert(11,'is_outlier_house',is_outlier_house)\n",
    "merged1.insert(12,'is_outlier_airbnb_original',is_outlier_airbnb_original)\n",
    "merged1.insert(13,'is_outlier_airbnb_cal',is_outlier_airbnb_cal)\n",
    "merged1.insert(14,'is_outlier_total_airbnb_original',is_outlier_total_airbnb_original)\n",
    "merged1.insert(15,'is_outlier_total_airbnb_cal',is_outlier_total_airbnb_cal)\n",
    "\n",
    "from collections import Counter\n",
    "print('Outliers for log transformed Price_house are: ',Counter(merged1['is_outlier_house']))\n",
    "print('Outliers for log transformed Price_airbnb_original are: ',Counter(merged1['is_outlier_airbnb_original']))\n",
    "print('Outliers for log transformed Price_airbnb_cal are: ',Counter(merged1['is_outlier_airbnb_cal']))\n",
    "print('Outliers for log transformed Total_house_original are: ',Counter(merged1['is_outlier_total_airbnb_original']))\n",
    "print('Outliers for log transformed Total_house_cal are: ',Counter(merged1['is_outlier_total_airbnb_cal']))\n",
    "\n",
    "#Calculate the mean and the std of each feature and identify the outliers\n",
    "mean_house1                 = merged1['Price_house'].mean()\n",
    "mean_airbnb_original1       = merged1['Price_airbnb_original'].mean()\n",
    "mean_airbnb_cal1            = merged1['Price_airbnb_cal'].mean()\n",
    "mean_total_airbnb_original1 = merged1['Total_airbnb_original'].mean()\n",
    "mean_total_airbnb_cal1      = merged1['Total_airbnb_cal'].mean()\n",
    "\n",
    "std_house1                  = merged1['Price_house'].std()\n",
    "std_airbnb_original1        = merged1['Price_airbnb_original'].std()\n",
    "std_airbnb_cal1             = merged1['Price_airbnb_cal'].std()\n",
    "std_total_airbnb_original1  = merged1['Total_airbnb_original'].std()\n",
    "std_total_airbnb_cal1       = merged1['Total_airbnb_cal'].std()\n",
    "\n",
    "is_outlier_house1                 = np.where(abs(merged1['Price_house'] - mean_house1) > 2 * std_house1,\n",
    "                                            1, 0)\n",
    "is_outlier_airbnb_original1       = np.where(abs(merged1['Price_airbnb_original'] - mean_airbnb_original1) \n",
    "                                            > 2 * std_airbnb_original1, 1, 0)\n",
    "is_outlier_airbnb_cal1            = np.where(abs(merged1['Price_airbnb_cal'] - mean_airbnb_cal1) \n",
    "                                            > 2 * std_airbnb_cal1, 1, 0)\n",
    "is_outlier_total_airbnb_original1 = np.where(abs(merged1['Total_airbnb_original'] - mean_total_airbnb_original1) \n",
    "                                            > 2 * std_total_airbnb_original1, 1, 0)\n",
    "is_outlier_total_airbnb_cal1      = np.where(abs(merged1['Total_airbnb_cal'] - mean_total_airbnb_cal1) \n",
    "                                            > 2 * std_total_airbnb_cal1, 1, 0)\n",
    "\n",
    "merged1.insert(16,'is_outlier_house1',is_outlier_house1)\n",
    "merged1.insert(17,'is_outlier_airbnb_original1',is_outlier_airbnb_original1)\n",
    "merged1.insert(18,'is_outlier_airbnb_cal1',is_outlier_airbnb_cal1)\n",
    "merged1.insert(19,'is_outlier_total_airbnb_original1',is_outlier_total_airbnb_original1)\n",
    "merged1.insert(20,'is_outlier_total_airbnb_cal1',is_outlier_total_airbnb_cal1)\n",
    "\n",
    "from collections import Counter\n",
    "print('Outliers for  transformed Price_house are: ',Counter(merged1['is_outlier_house1']))\n",
    "print('Outliers for  transformed Price_airbnb_original are: ',Counter(merged1['is_outlier_airbnb_original1']))\n",
    "print('Outliers for  transformed Price_airbnb_cal are: ',Counter(merged1['is_outlier_airbnb_cal1']))\n",
    "print('Outliers for  transformed Total_house_original are: ',Counter(merged1['is_outlier_total_airbnb_original1']))\n",
    "print('Outliers for  transformed Total_house_cal are: ',Counter(merged1['is_outlier_total_airbnb_cal1']))\n",
    "\n",
    "#Plot the outliers for with mahalnobis distance\n",
    "column_values_log = merged1[['log_Total_airbnb_original','log_Price_house']].values\n",
    "mean_vector_log   = np.asarray([merged1['log_Total_airbnb_original'].mean(),merged1['log_Price_house'].mean()]).reshape((1,2))\n",
    "mahalanobis_distances_log = spatial.distance.cdist(column_values_log,mean_vector_log,'mahalanobis')[:,0]\n",
    "\n",
    "column_values = merged1[['Total_airbnb_original','Price_house']].values\n",
    "mean_vector   = np.asarray([merged1['Total_airbnb_original'].mean(),merged1['Price_house'].mean()]).reshape((1,2))\n",
    "mahalanobis_distances = spatial.distance.cdist(column_values,mean_vector,'mahalanobis')[:,0]\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged1['log_Total_airbnb_original'],merged1['log_Price_house'],c=mahalanobis_distances_log,cmap=plt.cm.Blues)\n",
    "plt.xlabel('Log Transformed Total Airbnb Price')\n",
    "plt.ylabel('Log Transformed House Price')\n",
    "plt.title('Total Airbnb Price vs House Price \\nwith Log Transformation \\n(Original)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged1['Total_airbnb_original'],merged1['Price_house'],c=mahalanobis_distances,cmap=plt.cm.Blues)\n",
    "plt.xlabel('Total Airbnb Price')\n",
    "plt.ylabel('House Price')\n",
    "plt.title('Total Airbnb Price vs House Price \\nwithout Log Transformation \\n(Original)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Plot the outliers for with mahalnobis distance\n",
    "column_values_log1 = merged1[['log_Total_airbnb_cal','log_Price_house']].values\n",
    "mean_vector_log1   = np.asarray([merged1['log_Total_airbnb_cal'].mean(),merged1['log_Price_house'].mean()]).reshape((1,2))\n",
    "mahalanobis_distances_log1 = spatial.distance.cdist(column_values_log1,mean_vector_log1,'mahalanobis')[:,0]\n",
    "\n",
    "column_values1 = merged1[['Total_airbnb_cal','Price_house']].values\n",
    "mean_vector1   = np.asarray([merged1['Total_airbnb_cal'].mean(),merged1['Price_house'].mean()]).reshape((1,2))\n",
    "mahalanobis_distances1 = spatial.distance.cdist(column_values1,mean_vector1,'mahalanobis')[:,0]\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged1['log_Total_airbnb_cal'],merged1['log_Price_house'],c=mahalanobis_distances_log1,cmap=plt.cm.Blues)\n",
    "plt.xlabel('Log Transformed Total Airbnb Price')\n",
    "plt.ylabel('Log Transformed House Price')\n",
    "plt.title('Total Airbnb Price vs House Price \\nwith Log Transformation \\n(Calculated)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged1['Total_airbnb_cal'],merged1['Price_house'],c=mahalanobis_distances1,cmap=plt.cm.Blues)\n",
    "plt.xlabel('Total Airbnb Price')\n",
    "plt.ylabel('House Price')\n",
    "plt.title('Total Airbnb Price vs House Price \\nwithout Log Transformation \\n(Calculated)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Plot the outliers with mahalnobis distance\n",
    "column_values_log2 = merged1[['log_Price_airbnb_original','log_Price_house']].values\n",
    "mean_vector_log2   = np.asarray([merged1['log_Price_airbnb_original'].mean(),merged1['log_Price_house'].mean()]).reshape((1,2))\n",
    "mahalanobis_distances_log2 = spatial.distance.cdist(column_values_log2,mean_vector_log2,'mahalanobis')[:,0]\n",
    "\n",
    "column_values2 = merged1[['Price_airbnb_original','Price_house']].values\n",
    "mean_vector2   = np.asarray([merged1['Price_airbnb_original'].mean(),merged1['Price_house'].mean()]).reshape((1,2))\n",
    "mahalanobis_distances2 = spatial.distance.cdist(column_values1,mean_vector1,'mahalanobis')[:,0]\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged1['log_Price_airbnb_original'],merged1['log_Price_house'],c=mahalanobis_distances_log2,cmap=plt.cm.Blues)\n",
    "plt.xlabel('Log Transformed Airbnb Price')\n",
    "plt.ylabel('Log Transformed House Price')\n",
    "plt.title('Airbnb Price vs House Price \\nwith Log Transformation \\n(Original)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged1['Price_airbnb_original'],merged1['Price_house'],c=mahalanobis_distances2,cmap=plt.cm.Blues)\n",
    "plt.xlabel('Airbnb Price')\n",
    "plt.ylabel('House Price')\n",
    "plt.title('Airbnb Price vs House Price \\nwithout Log Transformation \\n(Original)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Plot the outliers with mahalnobis distance\n",
    "column_values_log3 = merged1[['log_Price_airbnb_cal','log_Price_house']].values\n",
    "mean_vector_log3  = np.asarray([merged1['log_Price_airbnb_cal'].mean(),merged1['log_Price_house'].mean()]).reshape((1,2))\n",
    "mahalanobis_distances_log3 = spatial.distance.cdist(column_values_log3,mean_vector_log3,'mahalanobis')[:,0]\n",
    "\n",
    "column_values3 = merged1[['Price_airbnb_cal','Price_house']].values\n",
    "mean_vector3   = np.asarray([merged1['Price_airbnb_cal'].mean(),merged1['Price_house'].mean()]).reshape((1,2))\n",
    "mahalanobis_distances3 = spatial.distance.cdist(column_values1,mean_vector1,'mahalanobis')[:,0]\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged1['log_Price_airbnb_cal'],merged1['log_Price_house'],c=mahalanobis_distances_log3,cmap=plt.cm.Blues)\n",
    "plt.xlabel('Log Transformed Airbnb Price')\n",
    "plt.ylabel('Log Transformed House Price')\n",
    "plt.title('Airbnb Price vs House Price \\nwith Log Transformation \\n(Calculated)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged1['Price_airbnb_cal'],merged1['Price_house'],c=mahalanobis_distances3,cmap=plt.cm.Blues)\n",
    "plt.xlabel('Airbnb Price')\n",
    "plt.ylabel('House Price')\n",
    "plt.title('Airbnb Price vs House Price \\nwithout Log Transformation \\n(Calculated)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#A new dataframe will be created with outliers and the results can be compared later. \n",
    "merged_with_outlier = merged1.copy(deep=False)\n",
    "\n",
    "#Remove the outliers\n",
    "merged1 = merged1[merged1['is_outlier_house'] == 0]\n",
    "merged1 = merged1[merged1['is_outlier_airbnb_original'] == 0]\n",
    "merged1 = merged1[merged1['is_outlier_airbnb_cal'] == 0]\n",
    "merged1 = merged1[merged1['is_outlier_total_airbnb_original'] == 0]\n",
    "merged1 = merged1[merged1['is_outlier_total_airbnb_cal'] == 0]\n",
    "merged1 = merged1[merged1['is_outlier_house1'] == 0]\n",
    "merged1 = merged1[merged1['is_outlier_airbnb_original1'] == 0]\n",
    "merged1 = merged1[merged1['is_outlier_airbnb_cal1'] == 0]\n",
    "merged1 = merged1[merged1['is_outlier_total_airbnb_original1'] == 0]\n",
    "merged1 = merged1[merged1['is_outlier_total_airbnb_cal1'] == 0]\n",
    "\n",
    "#Visualise the regressions of all sub-dataframes\n",
    "#Original \n",
    "plt.subplot(1,2,1)\n",
    "sns.regplot(x='log_Price_airbnb_original',y='log_Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb price vs \\nHouse price \\nin ORLT (Original)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.regplot(x='Price_airbnb_original',y='Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb price vs \\nHouse price \\nin ORW/LT (Original)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.regplot(x='log_Price_airbnb_original',y='log_Price_house',data=merged_with_outlier,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb price vs \\nHouse price \\nin OLT (Original)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.regplot(x='Price_airbnb_original',y='Price_house',data=merged_with_outlier,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb price vs \\nHouse price \\nin OW/LT (Original)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Calculated \n",
    "plt.subplot(1,2,1)\n",
    "sns.regplot(x='log_Price_airbnb_cal',y='log_Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb price vs \\nHouse price \\nin ORLT (Calculated)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.regplot(x='Price_airbnb_cal',y='Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb price vs \\nHouse price \\nin ORW/LT (Calculated)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.regplot(x='log_Price_airbnb_cal',y='log_Price_house',data=merged_with_outlier,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb price vs \\nHouse price \\nin OLT (Calculated)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.regplot(x='Price_airbnb_cal',y='Price_house',data=merged_with_outlier,scatter_kws={'alpha':0.4})\n",
    "plt.title('Airbnb price vs \\nHouse price \\nin OW/LT (Calculated)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Original\n",
    "plt.subplot(1,2,1)\n",
    "sns.regplot(x='log_Total_airbnb_original',y='log_Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb price vs \\nHouse price \\n in ORLT (Original)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.regplot(x='Total_airbnb_original',y='Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb price vs \\n House price \\nin ORW/LT (Original)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.regplot(x='log_Total_airbnb_original',y='log_Price_house',data=merged_with_outlier,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb price vs \\nHouse price \\n in OLT (Original)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.regplot(x='Total_airbnb_original',y='Price_house',data=merged_with_outlier,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb price vs \\n House price \\nin OW/LT (Original)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Calculated\n",
    "plt.subplot(1,2,1)\n",
    "sns.regplot(x='log_Total_airbnb_cal',y='log_Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb price vs \\nHouse price \\n in ORLT (Calculated)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.regplot(x='Total_airbnb_cal',y='Price_house',data=merged1,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb price vs \\n House price \\nin ORW/LT (Calculated)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.regplot(x='log_Total_airbnb_cal',y='log_Price_house',data=merged_with_outlier,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb price vs \\nHouse price \\n in OLT (Calculated)')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.regplot(x='Total_airbnb_cal',y='Price_house',data=merged_with_outlier,scatter_kws={'alpha':0.4})\n",
    "plt.title('Total Airbnb price vs \\n House price \\nin OW/LT (Calculated)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#PCA Analysis\n",
    "#Convert the columns to numpy arrays\n",
    "merged_PCA = merged1[['Postcode','Total_airbnb_original','Price_airbnb_original','Total_airbnb_cal',\n",
    "                      'Price_airbnb_cal','Price_house','log_Price_house','log_Total_airbnb_original',\n",
    "                      'log_Price_airbnb_original','log_Total_airbnb_cal','log_Price_airbnb_cal']]\n",
    "column_values_np = np.asarray(merged_PCA.columns.values)\n",
    "merged_np = merged_PCA.to_numpy()\n",
    "merged_np_filtered = merged_np[:,1::]\n",
    "\n",
    "#Convert the columns to numpy arrays\n",
    "merged_with_outlier_PCA = merged_with_outlier[['Postcode','Total_airbnb_original','Price_airbnb_original',\n",
    "                                               'Total_airbnb_cal', 'Price_airbnb_cal','Price_house',\n",
    "                                               'log_Price_house','log_Total_airbnb_original',\n",
    "                                               'log_Price_airbnb_original','log_Total_airbnb_cal',\n",
    "                                               'log_Price_airbnb_cal']]\n",
    "column_values_np = np.asarray(merged_with_outlier_PCA.columns.values)\n",
    "merged_outlier_np = merged_with_outlier_PCA.to_numpy()\n",
    "merged__outlier_np_filtered = merged_np[:,1::]\n",
    "\n",
    "#Assign 10 principle components\n",
    "pca=PCA(n_components=10)\n",
    "pca.fit(merged_np_filtered)\n",
    "merged_projected=pca.transform(merged_np_filtered)\n",
    "print(pca.explained_variance_ratio_)\n",
    "\n",
    "pca1=PCA(n_components=10)\n",
    "pca1.fit(merged__outlier_np_filtered)\n",
    "merged_outlier_projected=pca.transform(merged__outlier_np_filtered)\n",
    "print(pca1.explained_variance_ratio_)\n",
    "\n",
    "print(pca.components_)\n",
    "print(pca1.components_)\n",
    "\n",
    "#Plot the visualisation of PCA with colour mapping of the dataset\n",
    "coulour_mapping  = np.asarray(merged_projected[:,-1],'f')\n",
    "coulour_mapping1 = np.asarray(merged_outlier_projected[:,-1],'f')\n",
    "\n",
    "coulour_mapping_log  = np.asarray(merged_projected[:,-1],'f')\n",
    "coulour_mapping_log1 = np.asarray(merged_outlier_projected[:,-1],'f')\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged_projected[:,0],merged_projected[:,4],s=50,c=coulour_mapping,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Total_Airbnb \\n(Original) \\nin ORW/LT')\n",
    "plt.xlabel('Total_aribnb')\n",
    "plt.ylabel('Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged_outlier_projected[:,0],merged_outlier_projected[:,4],s=50,c=coulour_mapping1,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Total_aribnb \\n(Original) \\nin OW/LT')\n",
    "plt.xlabel('Total_aribnb')\n",
    "plt.ylabel('Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged_projected[:,6],merged_projected[:,5],s=50,c=coulour_mapping_log,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Total_Airbnb \\n(Original)\\n in ORLT')\n",
    "plt.xlabel('Log Transformed Total_aribnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged_outlier_projected[:,6],merged_outlier_projected[:,5],s=50,c=coulour_mapping_log1,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Total_Airbnb \\n(Original)\\n in OLT')\n",
    "plt.xlabel('Log Transformed Total_aribnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged_projected[:,2],merged_projected[:,4],s=50,c=coulour_mapping,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Total_Airbnb \\n(Calculated) \\nin ORW/LT')\n",
    "plt.xlabel('Total_aribnb')\n",
    "plt.ylabel('Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged_outlier_projected[:,2],merged_outlier_projected[:,4],s=50,c=coulour_mapping1,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Total_aribnb \\n(Calculated) \\nin OW/LT')\n",
    "plt.xlabel('Total_aribnb')\n",
    "plt.ylabel('Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged_projected[:,8],merged_projected[:,5],s=50,c=coulour_mapping_log,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Total_Airbnb \\n(Calculated)\\n in ORLT')\n",
    "plt.xlabel('Log Transformed Total_aribnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged_outlier_projected[:,8],merged_outlier_projected[:,5],s=50,c=coulour_mapping_log1,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Total_Airbnb \\n(Calculated)\\n in OLT')\n",
    "plt.xlabel('Log Transformed Total_aribnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Plot the residual plots \n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_projected[:,0],merged_projected[:,4],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\nTotal_aribnb (Original) \\n in ORW/LT')\n",
    "plt.xlabel('Total_aribnb')\n",
    "plt.ylabel('Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_outlier_projected[:,0],merged_outlier_projected[:,4],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\nTotal_aribnb (Original)\\n in OW/LT')\n",
    "plt.xlabel('Total_aribnb')\n",
    "plt.ylabel('Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_projected[:,6],merged_projected[:,5],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\nTotal_aribnb (Original) \\n in ORLT')\n",
    "plt.xlabel('Log Transformed Total_aribnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_outlier_projected[:,6],merged_outlier_projected[:,5],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\nTotal_aribnb (Original)\\n in OLT')\n",
    "plt.xlabel('Log Transformed Total_aribnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_projected[:,2],merged_projected[:,4],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\nTotal_aribnb (Calculated) \\n in OW/LT')\n",
    "plt.xlabel('Total_aribnb')\n",
    "plt.ylabel('Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_outlier_projected[:,2],merged_outlier_projected[:,4],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Total_aribnb (Calculated) \\n in OW/LT')\n",
    "plt.xlabel('Total_aribnb')\n",
    "plt.ylabel('Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_projected[:,8],merged_projected[:,5],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\nTotal_aribnb (Calculated) \\n in OLT')\n",
    "plt.xlabel('Log Transformed Total_aribnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_outlier_projected[:,8],merged_outlier_projected[:,5],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Total_aribnb (Calculated) \\n in OLT')\n",
    "plt.xlabel('Log Transformed Total_aribnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Plot the visualisation of PCA with colour mapping of the dataset\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged_projected[:,1],merged_projected[:,4],s=50,c=coulour_mapping,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Price_Airbnb \\n(Original) \\nin ORW/LT')\n",
    "plt.xlabel('Price_Airbnb')\n",
    "plt.ylabel('Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged_outlier_projected[:,1],merged_outlier_projected[:,4],s=50,c=coulour_mapping1,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Price_Airbnb \\n(Original) \\nin OW/LT')\n",
    "plt.xlabel('Price_Airbnb')\n",
    "plt.ylabel('Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged_projected[:,7],merged_projected[:,5],s=50,c=coulour_mapping_log,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Price_Airbnb \\n(Original)\\n in ORLT')\n",
    "plt.xlabel('Log Transformed Price_Airbnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged_outlier_projected[:,7],merged_outlier_projected[:,5],s=50,c=coulour_mapping_log1,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Total_Airbnb \\n(Original)\\n in OLT')\n",
    "plt.xlabel('Log Transformed Price_Airbnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged_projected[:,3],merged_projected[:,4],s=50,c=coulour_mapping,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Price_Airbnb \\n(Calculated) \\nin ORW/LT')\n",
    "plt.xlabel('Price_Airbnb')\n",
    "plt.ylabel('Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged_outlier_projected[:,3],merged_outlier_projected[:,4],s=50,c=coulour_mapping1,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Price_Airbnb \\n(Calculated) \\nin OW/LT')\n",
    "plt.xlabel('Price_Airbnb')\n",
    "plt.ylabel('Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.scatter(merged_projected[:,9],merged_projected[:,5],s=50,c=coulour_mapping_log,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Price_Airbnb \\n(Calculated)\\n in ORLT')\n",
    "plt.xlabel('Log Transformed Price_Airbnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.scatter(merged_outlier_projected[:,9],merged_outlier_projected[:,5],s=50,c=coulour_mapping_log1,linewidths=0,cmap=plt.cm.Blues)\n",
    "plt.title('Price_house vs Price_Airbnb \\n(Calculated)\\n in OLT')\n",
    "plt.xlabel('Log Transformed Price_Airbnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Plot the residual plots \n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_projected[:,1],merged_projected[:,4],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Price_airbnb (Original) \\n in ORW/LT')\n",
    "plt.xlabel('Price_airbnb')\n",
    "plt.ylabel('Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_outlier_projected[:,1],merged_outlier_projected[:,4],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Price_airbnb (Original)\\n in OW/LT')\n",
    "plt.xlabel('Price_airbnb')\n",
    "plt.ylabel('Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_projected[:,7],merged_projected[:,5],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Price_airbnb (Original) \\n in ORLT')\n",
    "plt.xlabel('Log Transformed Price_airbnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_outlier_projected[:,7],merged_outlier_projected[:,5],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Price_airbnb (Original)\\n in OLT')\n",
    "plt.xlabel('Log Transformed Price_airbnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_projected[:,3],merged_projected[:,4],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Price_airbnb (Calculated) \\n in OW/LT')\n",
    "plt.xlabel('Price_airbnb')\n",
    "plt.ylabel('Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_outlier_projected[:,3],merged_outlier_projected[:,4],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Price_airbnb (Calculated) \\n in OW/LT')\n",
    "plt.xlabel('Price_airbnb')\n",
    "plt.ylabel('Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_projected[:,9],merged_projected[:,5],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Price_airbnb (Calculated) \\n in OLT')\n",
    "plt.xlabel('Log Transformed Price_airbnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_outlier_projected[:,9],merged_outlier_projected[:,5],lowess=True,color='b')\n",
    "plt.title('Price_house vs \\n Price_airbnb (Calculated) \\n in OLT')\n",
    "plt.xlabel('Log Transformed Price_airbnb')\n",
    "plt.ylabel('Log Transformed Price_house')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Visualise all the features in both O and OR sub-dataframes.\n",
    "sns.pairplot(merged1,hue='Postcode')\n",
    "plt.title('Pairplot with outliers removed')\n",
    "\n",
    "sns.pairplot(merged_with_outlier,hue='Postcode')\n",
    "plt.title('Pairplot with outliers')\n",
    "\n",
    "#Plot the residual plots for all sub-dataframes\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged1['log_Total_airbnb_original'],merged1['log_Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Total_airbnb (Original)\\nand Price_house in ORLT')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged1['log_Total_airbnb_cal'],merged1['log_Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Total_airbnb (Calculated) \\nand Price_house in ORLT')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged1['Total_airbnb_original'],merged1['Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Total_airbnb (Original) \\nand Price_house in ORW/LT')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged1['Total_airbnb_cal'],merged1['Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Total_airbnb (Calculated)\\nand Price_house in ORW/LT')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged1['log_Price_airbnb_original'],merged1['log_Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Price_airbnb (Original)\\nand Price_house in ORLT')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged1['log_Price_airbnb_cal'],merged1['log_Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Price_airbnb (Calculated)\\nand Price_house in ORLT')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged1['Price_airbnb_original'],merged1['Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Price_airbnb (Original)\\nand Price_house in ORW/LT')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged1['Price_airbnb_cal'],merged1['Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Price_airbnb (Calculated) \\nand Price_house in ORW/LT')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Plot the residual plots for all sub-dataframes\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_with_outlier['log_Total_airbnb_original'],merged_with_outlier['log_Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Total_airbnb (Original)\\nand Price_house in ORLT')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_with_outlier['log_Total_airbnb_cal'],merged_with_outlier['log_Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Total_airbnb (Calculated) \\nand Price_house in ORLT')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_with_outlier['Total_airbnb_original'],merged_with_outlier['Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Total_airbnb (Original) \\nand\\n Price_house in ORW/LT')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_with_outlier['Total_airbnb_cal'],merged_with_outlier['Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Total_airbnb (Calculated)\\nand\\n Price_house in ORW/LT')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_with_outlier['log_Price_airbnb_original'],merged_with_outlier['log_Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Price_airbnb (Original)\\nand Price_house in ORLT')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_with_outlier['log_Price_airbnb_cal'],merged_with_outlier['log_Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Price_airbnb (Calculated)\\nand Price_house in ORLT')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.residplot(merged_with_outlier['Price_airbnb_original'],merged_with_outlier['Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Price_airbnb (Original)\\nand\\n Price_house in ORW/LT')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.residplot(merged_with_outlier['Price_airbnb_cal'],merged_with_outlier['Price_house'],lowess=True,color='g')\n",
    "plt.title('Residual plot for \\n Price_airbnb (Calculated) \\nand\\n Price_house in ORW/LT')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Correlation heatmap\n",
    "correlation  = merged1.corr()\n",
    "correlation1 = merged_with_outlier.corr()\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "sns.heatmap(correlation,vmin=-1,vmax=1,cmap=sns.diverging_palette(20, 220, n=200),square=True)\n",
    "plt.title('Correlation Heatmap in OR')\n",
    "plt.xticks(horizontalalignment='right')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "sns.heatmap(correlation1,vmin=-1,vmax=1,cmap=sns.diverging_palette(20, 220, n=200),square=True)\n",
    "plt.title('Correlation Heatmap in O')\n",
    "plt.xticks(horizontalalignment='right')\n",
    "plt.show()\n",
    "\n",
    "#Restricting to house price and sort the values from the most to the least\n",
    "correlation_house = correlation[['log_Price_house']]\n",
    "correlation_house = correlation_house.sort_values(by='log_Price_house',ascending=False)\n",
    "\n",
    "correlation_house1 = correlation1[['log_Price_house']]\n",
    "correlation_house1 = correlation_house1.sort_values(by='log_Price_house',ascending=False)\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.heatmap(correlation_house,vmin=-1,vmax=1,cmap=sns.diverging_palette(20, 220, n=200),square=True)\n",
    "plt.title('Correlation Heatmap \\nof OR')\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.heatmap(correlation_house1,vmin=-1,vmax=1,cmap=sns.diverging_palette(20, 220, n=200),square=True)\n",
    "plt.title('Correlation Heatmap \\nof O')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#Drop the is_outliers columns\n",
    "merged1 = merged1[['Postcode','Total_airbnb_original','Price_airbnb_original','Total_airbnb_cal',\n",
    "                      'Price_airbnb_cal','Price_house','log_Price_house','log_Total_airbnb_original',\n",
    "                      'log_Price_airbnb_original','log_Total_airbnb_cal','log_Price_airbnb_cal']]\n",
    "\n",
    "#Drop the is_outliers columns\n",
    "merged_with_outlier = merged_with_outlier[['Postcode','Total_airbnb_original','Price_airbnb_original','Total_airbnb_cal',\n",
    "                      'Price_airbnb_cal','Price_house','log_Price_house','log_Total_airbnb_original',\n",
    "                      'log_Price_airbnb_original','log_Total_airbnb_cal','log_Price_airbnb_cal']]\n",
    "\n",
    "#Pearson correlation\n",
    "pearsoncorr  = merged1.corr(method='pearson')\n",
    "pearsoncorr1 = merged_with_outlier.corr(method='pearson')\n",
    "\n",
    "#Plot the Pearson correlation heatmap \n",
    "plt.subplots(figsize=(20,20))\n",
    "sns.heatmap(pearsoncorr, \n",
    "            xticklabels=pearsoncorr.columns,\n",
    "            yticklabels=pearsoncorr.columns,\n",
    "            cmap='RdBu_r',\n",
    "            annot=True,\n",
    "            linewidth=0.5)\n",
    "b, t = plt.ylim()\n",
    "b += 0.5 \n",
    "t -= 0.5 \n",
    "plt.ylim(b, t)\n",
    "\n",
    "#Plot the Pearson correlation heatmap\n",
    "plt.subplots(figsize=(20,20))\n",
    "sns.heatmap(pearsoncorr1, \n",
    "            xticklabels=pearsoncorr1.columns,\n",
    "            yticklabels=pearsoncorr1.columns,\n",
    "            cmap='RdBu_r',\n",
    "            annot=True,\n",
    "            linewidth=0.5)\n",
    "b, t = plt.ylim()\n",
    "b += 0.5 \n",
    "t -= 0.5 \n",
    "plt.ylim(b, t)\n",
    "\n",
    "#Obtain the p-values of ORLT \n",
    "pearson_corr,p_val_pearson   = stats.pearsonr(merged1['log_Total_airbnb_original'],merged1['log_Price_house'])\n",
    "print('Pearson correlation between Total_airbnb (Original) and Price_house is in ORLT is: ',pearson_corr,\n",
    "      '\\n with p value of: ',p_val_pearson)\n",
    "\n",
    "pearson_corr1,p_val_pearson1 = stats.pearsonr(merged1['log_Price_airbnb_original'],merged1['log_Price_house'])\n",
    "print('Pearson correlation between Price_airbnb (Original) and Price_house in ORLT is: ',pearson_corr1,\n",
    "      '\\n with p value of: ',p_val_pearson1)\n",
    "\n",
    "pearson_corr2,p_val_pearson2 = stats.pearsonr(merged1['log_Total_airbnb_cal'],merged1['log_Price_house'])\n",
    "print('Pearson correlation between Total_airbnb (Calculated) and Price_house in ORLT is: ',pearson_corr2,\n",
    "      '\\n with p value of: ',p_val_pearson2)\n",
    "\n",
    "pearson_corr3,p_val_pearson3 = stats.pearsonr(merged1['log_Price_airbnb_cal'],merged1['log_Price_house'])\n",
    "print('Pearson correlation between Price_airbnb (Calculated) and Price_house is in ORLT is: ',pearson_corr3,\n",
    "      '\\n with p value of: ',p_val_pearson3)\n",
    "\n",
    "#Obtain the p-values of OLT \n",
    "pearson_corr4,p_val_pearson4 = stats.pearsonr(merged_with_outlier['log_Total_airbnb_original'],\n",
    "                                            merged_with_outlier['log_Price_house'])\n",
    "print('Pearson correlation between Total_airbnb (Original) and Price_house in OLT is: ',pearson_corr4,\n",
    "      '\\n with p value of: ',p_val_pearson4)\n",
    "\n",
    "pearson_corr5,p_val_pearson5 = stats.pearsonr(merged_with_outlier['log_Total_airbnb_cal'],\n",
    "                                            merged_with_outlier['log_Price_house'])\n",
    "print('Pearson correlation between Total_airbnb (Calculated) and Price_house in OLT is: ',pearson_corr5,\n",
    "      '\\n with p value of: ',p_val_pearson5)\n",
    "\n",
    "pearson_corr6,p_val_pearson6 = stats.pearsonr(merged_with_outlier['log_Price_airbnb_original'],\n",
    "                                            merged_with_outlier['log_Price_house'])\n",
    "print('Pearson correlation between Price_airbnb (Original) and Price_house in OLT is: ',pearson_corr6,\n",
    "      '\\n with p value of: ',p_val_pearson6)\n",
    "\n",
    "pearson_corr7,p_val_pearson7 = stats.pearsonr(merged_with_outlier['log_Price_airbnb_cal'],\n",
    "                                            merged_with_outlier['log_Price_house'])\n",
    "print('Pearson correlation between Price_airbnb (Calculated) and Price_house is in OLT is: ',pearson_corr7,\n",
    "      '\\n with p value of: ',p_val_pearson7)\n",
    "\n",
    "#Spearman correlation\n",
    "spearmancorr  = merged1.corr(method='spearman')\n",
    "spearmancorr1 = merged_with_outlier.corr(method='spearman')\n",
    "\n",
    "#Plot Spearman correlation heatmap\n",
    "plt.subplots(figsize=(20,20))\n",
    "sns.heatmap(spearmancorr, \n",
    "            xticklabels=spearmancorr.columns,\n",
    "            yticklabels=spearmancorr.columns,\n",
    "            cmap='RdBu_r',\n",
    "            annot=True,\n",
    "            linewidth=0.5)\n",
    "b, t = plt.ylim()\n",
    "b += 0.5 \n",
    "t -= 0.5 \n",
    "plt.ylim(b, t)\n",
    "\n",
    "#Plot Spearman correlation heatmap\n",
    "plt.subplots(figsize=(20,20))\n",
    "sns.heatmap(spearmancorr1, \n",
    "            xticklabels=spearmancorr1.columns,\n",
    "            yticklabels=spearmancorr1.columns,\n",
    "            cmap='RdBu_r',\n",
    "            annot=True,\n",
    "            linewidth=0.5)\n",
    "b, t = plt.ylim()\n",
    "b += 0.5 \n",
    "t -= 0.5 \n",
    "plt.ylim(b, t)\n",
    "\n",
    "#Obtain p-values of ORLT\n",
    "spearman_corr,p_val_spearman=stats.spearmanr(merged1['log_Total_airbnb_original'],merged1['log_Price_house'])\n",
    "print('Pearson correlation between Total_airbnb (Original) and Price_house is in ORLT is: ',spearman_corr,\n",
    "      '\\n with p value of: ',p_val_spearman)\n",
    "\n",
    "spearman_corr1,p_val_spearman1=stats.spearmanr(merged1['log_Total_airbnb_cal'],merged1['log_Price_house'])\n",
    "print('Pearson correlation between Total_airbnb (Calculated) and Price_house in ORLT is: ',spearman_corr1,\n",
    "      '\\n with p value of: ',p_val_spearman1)\n",
    "\n",
    "spearman_corr2,p_val_spearman2=stats.spearmanr(merged1['log_Price_airbnb_original'],merged1['log_Price_house'])\n",
    "print('Pearson correlation between Price_airbnb (Original) and Price_house in ORLT is: ',spearman_corr2,\n",
    "      '\\n with p value of: ',p_val_spearman2)\n",
    "\n",
    "spearman_corr3,p_val_spearman3=stats.spearmanr(merged1['log_Price_airbnb_cal'],merged1['log_Price_house'])\n",
    "print('Pearson correlation between Price_airbnb (Calculated) and Price_house is in ORLT is: ',spearman_corr3,\n",
    "      '\\n with p value of: ',p_val_spearman3)\n",
    "\n",
    "#Obtain p-values of OLT\n",
    "spearman_corr4,p_val_spearman4=stats.spearmanr(merged_with_outlier['log_Total_airbnb_original'],\n",
    "                                            merged_with_outlier['log_Price_house'])\n",
    "print('Pearson correlation between Total_airbnb (Original) and Price_house in OLT is: ',spearman_corr4,\n",
    "      '\\n with p value of: ',p_val_spearman4)\n",
    "\n",
    "spearman_corr5,p_val_spearman5=stats.spearmanr(merged_with_outlier['log_Total_airbnb_cal'],\n",
    "                                            merged_with_outlier['log_Price_house'])\n",
    "print('Pearson correlation between Total_airbnb (Calculated) and Price_house in OLT is: ',spearman_corr5,\n",
    "      '\\n with p value of: ',p_val_spearman5)\n",
    "\n",
    "spearman_corr6,p_val_spearman6=stats.spearmanr(merged_with_outlier['log_Price_airbnb_original'],\n",
    "                                            merged_with_outlier['log_Price_house'])\n",
    "print('Pearson correlation between Price_airbnb (Original) and Price_house in OLT is: ',spearman_corr6,\n",
    "      '\\n with p value of: ',p_val_spearman6)\n",
    "\n",
    "spearman_corr7,p_val_spearman7=stats.spearmanr(merged_with_outlier['log_Price_airbnb_cal'],\n",
    "                                            merged_with_outlier['log_Price_house'])\n",
    "print('Pearson correlation between Price_airbnb (Calculated) and Price_house is in OLT is: ',spearman_corr7,\n",
    "      '\\n with p value of: ',p_val_spearman7)\n",
    "\n",
    "#Plot the time series graph for both OLT and ORLT and resample to 3 years\n",
    "merged1[[\"log_Price_house\", \"log_Price_airbnb_original\",'log_Price_airbnb_cal']].resample(\"3y\").median().plot(figsize=(15,4))\n",
    "plt.title('Time Series for House Prices and Airbnb Prices in ORLT with resampling to 3 years')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Price')\n",
    "plt.show()\n",
    "\n",
    "merged_with_outlier[[\"log_Price_house\", \"log_Price_airbnb_original\",'log_Price_airbnb_cal']].resample(\"3y\").median().plot(figsize=(15,4))\n",
    "plt.title('Time Series for House Prices and Airbnb Prices in OLT with resampling to 3 years')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Price')\n",
    "plt.show()\n",
    "\n",
    "#Plot the rolling windwo time series graph for both OLT and ORLT with length of 24\n",
    "merged1[[\"log_Price_house\", \"log_Price_airbnb_original\",'log_Price_airbnb_cal']].rolling(24).mean().plot(figsize=(15,4))\n",
    "plt.title('Rolling Window Time Series for House Prices and Airbnb Prices in ORLT')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Price')\n",
    "plt.show()\n",
    "\n",
    "merged_with_outlier[[\"log_Price_house\", \"log_Price_airbnb_original\",'log_Price_airbnb_cal']].rolling(24).mean().plot(figsize=(15,4))\n",
    "plt.title('Rolling Window Time Series for House Prices and Airbnb Prices in OLT')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Price')\n",
    "plt.show()\n",
    "\n",
    "#The Pearson correlation is a good place to start to find the global synchrony of two datasets. \n",
    "#Plot the rolling windwo time series graph with Pearson correlation for both ORLT and OLT\n",
    "f,ax = plt.subplots(figsize=(15,3))\n",
    "merged1[[\"log_Price_house\", \"log_Price_airbnb_original\",'log_Price_airbnb_cal']].rolling(window=30,center=True).median().plot(ax=ax)\n",
    "ax.set(xlabel='Time',ylabel='Pearson r',title='Time Series with Rolling Window for House Prices and Airbnb Prices in ORLT')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "f,ax = plt.subplots(figsize=(15,3))\n",
    "merged_with_outlier[[\"log_Price_house\", \"log_Price_airbnb_original\",'log_Price_airbnb_cal']].rolling(window=30,center=True).median().plot(ax=ax)\n",
    "ax.set(xlabel='Time',ylabel='Pearson r',title='Time Series with Rolling Window for House Prices and Airbnb Prices in OLT')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "#Time Lagged Cross-correlation\n",
    "#Use pandas own functions to implement a cross correlation function\n",
    "def crosscorr(datax, datay, lag=0, wrap=False):\n",
    "    \"\"\" Lag-N cross correlation. \n",
    "    Shifted data filled with NaNs \n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    lag : int, default 0\n",
    "    datax, datay : pandas.Series objects of equal length\n",
    "    Returns\n",
    "    ----------\n",
    "    crosscorr : float\n",
    "    \"\"\"\n",
    "    if wrap:\n",
    "        shiftedy = datay.shift(lag)\n",
    "        shiftedy.iloc[:lag] = datay.iloc[-lag:].values\n",
    "        return datax.corr(shiftedy)\n",
    "    else: \n",
    "        return datax.corr(datay.shift(lag))\n",
    "    \n",
    "#TLCC for ORLT\n",
    "d1 = merged1['log_Price_airbnb_original']\n",
    "d2 = merged1['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "rs     = [crosscorr(d1,d2,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "offset = np.ceil(len(rs)/2)-np.argmax(rs)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(rs)\n",
    "ax.axvline(np.ceil(len(rs)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(rs),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in ORLT \\n Offset = {offset} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "d3 = merged1['log_Price_airbnb_cal']\n",
    "d4 = merged1['log_Price_house']\n",
    "\n",
    "rs1     = [crosscorr(d3,d4,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "offset1 = np.ceil(len(rs1)/2)-np.argmax(rs1)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(rs1)\n",
    "ax.axvline(np.ceil(len(rs1)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(rs1),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in ORLT \\n Offset = {offset1} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#TLCC for OLT\n",
    "d4 = merged_with_outlier['log_Price_airbnb_original']\n",
    "d5 = merged_with_outlier['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "rs3     = [crosscorr(d4,d5,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "offset3 = np.ceil(len(rs3)/2)-np.argmax(rs3)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(rs3)\n",
    "ax.axvline(np.ceil(len(rs3)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(rs3),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in OLT \\n Offset = {offset3} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "d6 = merged_with_outlier['log_Price_airbnb_cal']\n",
    "d7 = merged_with_outlier['log_Price_house']\n",
    "\n",
    "rs4     = [crosscorr(d6,d7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "offset4 = np.ceil(len(rs4)/2)-np.argmax(rs4)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(rs4)\n",
    "ax.axvline(np.ceil(len(rs4)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(rs4),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in OLT \\n Offset = {offset4} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#Split the Postcode areas into East, West, North, North Weset, South East, South West, Central and Outer \n",
    "East_merged_with_outlier   = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='E']\n",
    "East_merged_with_outlier   = East_merged_with_outlier[East_merged_with_outlier['Postcode'].str[1]!='C']\n",
    "East_merged_with_outlier   = East_merged_with_outlier[East_merged_with_outlier['Postcode'].str[1]!='N']\n",
    "\n",
    "if East_merged_with_outlier['Postcode'].all()<='E18':\n",
    "    East_merged_with_outlier['Postcode'] = East_merged_with_outlier['Postcode']\n",
    "else: \n",
    "    East_merged_with_outlier['Postcode'] = East_merged_with_outlier['Postcode'].str[0:2]\n",
    "\n",
    "East_merged_with_outlier.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "    \n",
    "West_merged_with_outlier   = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='W']\n",
    "West_merged_with_outlier   = West_merged_with_outlier[West_merged_with_outlier['Postcode'].str[1]!='C']\n",
    "\n",
    "West_merged_with_outlier.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "\n",
    "North_merged_with_outlier = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='N']\n",
    "NW_merged_with_outlier    = North_merged_with_outlier[North_merged_with_outlier['Postcode'].str[1]=='W']\n",
    "North_merged = North_merged_with_outlier[North_merged_with_outlier['Postcode'].str[1]!='W']\n",
    "\n",
    "North_merged_with_outlier.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "NW_merged_with_outlier.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "\n",
    "South_merged_with_outlier = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='S']    \n",
    "SE_merged_with_outlier    = South_merged_with_outlier[South_merged_with_outlier['Postcode'].str[1]=='E']\n",
    "SW_merged_with_outlier = South_merged_with_outlier[South_merged_with_outlier['Postcode'].str[1]=='W']\n",
    "\n",
    "SE_merged_with_outlier.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "SW_merged_with_outlier.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "       \n",
    "Central_merged_with_outlier = merged_with_outlier[merged_with_outlier['Postcode'].str[1]=='C']\n",
    "\n",
    "Central_merged_with_outlier.drop_duplicates(subset=['Postcode']).reset_index()\n",
    "\n",
    "IG = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='I']\n",
    "RM = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='R']\n",
    "EN = merged_with_outlier[merged_with_outlier['Postcode'].str[1]=='N']\n",
    "DA = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='D']\n",
    "BR = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='B']\n",
    "CR = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='C']\n",
    "SM = merged_with_outlier[merged_with_outlier['Postcode'].str[1]=='M']\n",
    "KT = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='K']\n",
    "TW = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='T']\n",
    "UB = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='U']\n",
    "HA = merged_with_outlier[merged_with_outlier['Postcode'].str[0]=='H']\n",
    "WD = merged_with_outlier[merged_with_outlier['Postcode'].str[1]=='D']\n",
    "\n",
    "Outer_merged_with_outlier = pd.concat([IG,RM,EN,DA,BR,CR,SM,KT,TW,UB,HA,WD]).reset_index()\n",
    "\n",
    "e1 = East_merged_with_outlier['log_Price_airbnb_original']\n",
    "e2 = East_merged_with_outlier['log_Price_airbnb_cal']\n",
    "e3 = East_merged_with_outlier['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "east_rs     = [crosscorr(e1,e3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "east_offset = np.ceil(len(east_rs)/2)-np.argmax(east_rs)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(east_rs)\n",
    "ax.axvline(np.ceil(len(east_rs)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(east_rs),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in East London in OLT \\nOffset = {east_offset} frames\\nE1 leads <> E2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "east_rs1     = [crosscorr(e2,e3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "east_offset1 = np.ceil(len(east_rs1)/2)-np.argmax(east_rs1)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(east_rs1)\n",
    "ax.axvline(np.ceil(len(east_rs1)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(east_rs1),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in East Londonin OLT \\nOffset = {east_offset1} frames\\nE1 leads <> E2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "e5 = East_merged['log_Price_airbnb_original']\n",
    "e6 = East_merged['log_Price_airbnb_cal']\n",
    "e7 = East_merged['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "east_rs5     = [crosscorr(e5,e7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "east_offset5 = np.ceil(len(east_rs5)/2)-np.argmax(east_rs5)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(east_rs5)\n",
    "ax.axvline(np.ceil(len(east_rs5)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(east_rs5),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in East London in ORLT \\nOffset = {east_offset5} frames\\nE1 leads <> E2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "east_rs6     = [crosscorr(e6,e7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "east_offset6 = np.ceil(len(east_rs6)/2)-np.argmax(east_rs6)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(east_rs6)\n",
    "ax.axvline(np.ceil(len(east_rs6)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(east_rs6),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in East London in ORLT \\nOffset = {east_offset6} frames\\nE1 leads <> E2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "w1 = West_merged_with_outlier['log_Price_airbnb_original']\n",
    "w2 = West_merged_with_outlier['log_Price_airbnb_cal']\n",
    "w3 = West_merged_with_outlier['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "west_rs     = [crosscorr(w1,w3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "west_offset = np.ceil(len(west_rs)/2)-np.argmax(west_rs)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(west_rs)\n",
    "ax.axvline(np.ceil(len(west_rs)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(west_rs),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in West London in OLT \\nOffset = {west_offset} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "west_rs1     = [crosscorr(w2,w3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "west_offset1 = np.ceil(len(west_rs1)/2)-np.argmax(west_rs1)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(west_rs1)\n",
    "ax.axvline(np.ceil(len(west_rs1)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(west_rs1),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in West Londonin OLT \\nOffset = {west_offset1} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "w5 = West_merged['log_Price_airbnb_original']\n",
    "w6 = West_merged['log_Price_airbnb_cal']\n",
    "w7 = West_merged['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "west_rs5     = [crosscorr(w5,w7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "west_offset5 = np.ceil(len(west_rs5)/2)-np.argmax(west_rs5)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(west_rs5)\n",
    "ax.axvline(np.ceil(len(west_rs5)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(west_rs5),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in West London in ORLT \\nOffset = {west_offset5} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "west_rs6     = [crosscorr(w6,w7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "west_offset6 = np.ceil(len(west_rs6)/2)-np.argmax(west_rs6)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(west_rs6)\n",
    "ax.axvline(np.ceil(len(west_rs6)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(west_rs6),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in West London in ORLT \\nOffset = {west_offset6} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "n1 = North_merged_with_outlier['log_Price_airbnb_original']\n",
    "n2 = North_merged_with_outlier['log_Price_airbnb_cal']\n",
    "n3 = North_merged_with_outlier['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "north_rs     = [crosscorr(n1,n3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "north_offset = np.ceil(len(north_rs)/2)-np.argmax(north_rs)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(north_rs)\n",
    "ax.axvline(np.ceil(len(north_rs)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(north_rs),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in North London in OLT \\nOffset = {north_offset} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "north_rs1     = [crosscorr(n2,n3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "north_offset1 = np.ceil(len(north_rs1)/2)-np.argmax(north_rs1)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(north_rs1)\n",
    "ax.axvline(np.ceil(len(north_rs1)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(north_rs1),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in North Londonin OLT \\nOffset = {north_offset1} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "n5 = North_merged['log_Price_airbnb_original']\n",
    "n6 = North_merged['log_Price_airbnb_cal']\n",
    "n7 = North_merged['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "north_rs5     = [crosscorr(n5,n7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "north_offset5 = np.ceil(len(north_rs5)/2)-np.argmax(north_rs5)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(north_rs5)\n",
    "ax.axvline(np.ceil(len(north_rs5)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(north_rs5),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in North London in ORLT \\nOffset = {north_offset5} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "north_rs6     = [crosscorr(n6,n7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "north_offset6 = np.ceil(len(north_rs6)/2)-np.argmax(north_rs6)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(north_rs6)\n",
    "ax.axvline(np.ceil(len(north_rs6)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(north_rs6),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in North London in ORLT \\nOffset = {north_offset6} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "nw1 = NW_merged_with_outlier['log_Price_airbnb_original']\n",
    "nw2 = NW_merged_with_outlier['log_Price_airbnb_cal']\n",
    "nw3 = NW_merged_with_outlier['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "nw_rs     = [crosscorr(nw1,nw3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "nw_offset = np.ceil(len(nw_rs)/2)-np.argmax(nw_rs)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(nw_rs)\n",
    "ax.axvline(np.ceil(len(nw_rs)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(nw_rs),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in North West London in OLT \\nOffset = {nw_offset} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "nw_rs1     = [crosscorr(nw2,nw3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "nw_offset1 = np.ceil(len(nw_rs1)/2)-np.argmax(nw_rs1)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(nw_rs1)\n",
    "ax.axvline(np.ceil(len(nw_rs1)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(nw_rs1),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in North West Londonin OLT \\nOffset = {nw_offset1} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "nw5 = North_West_merged['log_Price_airbnb_original']\n",
    "nw6 = North_West_merged['log_Price_airbnb_cal']\n",
    "nw7 = North_West_merged['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "nw_rs5     = [crosscorr(nw5,nw7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "nw_offset5 = np.ceil(len(nw_rs5)/2)-np.argmax(nw_rs5)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(nw_rs5)\n",
    "ax.axvline(np.ceil(len(nw_rs5)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(nw_rs5),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in North West London in ORLT \\nOffset = {nw_offset5} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "nw_rs6     = [crosscorr(nw6,nw7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "nw_offset6 = np.ceil(len(nw_rs6)/2)-np.argmax(nw_rs6)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(nw_rs6)\n",
    "ax.axvline(np.ceil(len(nw_rs6)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(nw_rs6),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in North West London in ORLT \\nOffset = {nw_offset6} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "sw1 = SW_merged_with_outlier['log_Price_airbnb_original']\n",
    "sw2 = SW_merged_with_outlier['log_Price_airbnb_cal']\n",
    "sw3 = SW_merged_with_outlier['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "sw_rs     = [crosscorr(sw1,sw3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "sw_offset = np.ceil(len(sw_rs)/2)-np.argmax(sw_rs)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(sw_rs)\n",
    "ax.axvline(np.ceil(len(sw_rs)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(sw_rs),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in South West London in OLT \\nOffset = {sw_offset} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "sw_rs1     = [crosscorr(sw2,sw3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "sw_offset1 = np.ceil(len(sw_rs1)/2)-np.argmax(sw_rs1)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(sw_rs1)\n",
    "ax.axvline(np.ceil(len(sw_rs1)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(sw_rs1),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in South West Londonin OLT \\nOffset = {sw_offset1} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "sw5 = South_West_merged['log_Price_airbnb_original']\n",
    "sw6 = South_West_merged['log_Price_airbnb_cal']\n",
    "sw7 = South_West_merged['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "sw_rs5     = [crosscorr(sw5,sw7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "sw_offset5 = np.ceil(len(sw_rs5)/2)-np.argmax(sw_rs5)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(sw_rs5)\n",
    "ax.axvline(np.ceil(len(sw_rs5)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(sw_rs5),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in South West London in ORLT \\nOffset = {sw_offset5} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "sw_rs6     = [crosscorr(sw6,sw7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "sw_offset6 = np.ceil(len(sw_rs6)/2)-np.argmax(sw_rs6)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(sw_rs6)\n",
    "ax.axvline(np.ceil(len(sw_rs6)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(sw_rs6),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in South West London in ORLT \\nOffset = {sw_offset6} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "se1 = SE_merged_with_outlier['log_Price_airbnb_original']\n",
    "se2 = SE_merged_with_outlier['log_Price_airbnb_cal']\n",
    "se3 = SE_merged_with_outlier['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "se_rs     = [crosscorr(se1,se3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "se_offset = np.ceil(len(se_rs)/2)-np.argmax(se_rs)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(se_rs)\n",
    "ax.axvline(np.ceil(len(se_rs)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(se_rs),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in South East London in OLT \\nOffset = {se_offset} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "se_rs1     = [crosscorr(se2,se3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "se_offset1 = np.ceil(len(se_rs1)/2)-np.argmax(se_rs1)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(se_rs1)\n",
    "ax.axvline(np.ceil(len(se_rs1)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(se_rs1),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in South East Londonin OLT \\nOffset = {se_offset1} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "se5 = South_East_merged['log_Price_airbnb_original']\n",
    "se6 = South_East_merged['log_Price_airbnb_cal']\n",
    "se7 = South_East_merged['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "se_rs5     = [crosscorr(se5,se7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "se_offset5 = np.ceil(len(se_rs5)/2)-np.argmax(se_rs5)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(se_rs5)\n",
    "ax.axvline(np.ceil(len(se_rs5)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(se_rs5),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in South East London in ORLT \\nOffset = {se_offset5} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "se_rs6     = [crosscorr(se6,se7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "se_offset6 = np.ceil(len(se_rs6)/2)-np.argmax(se_rs6)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(se_rs6)\n",
    "ax.axvline(np.ceil(len(se_rs6)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(se_rs6),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in South East London in ORLT \\nOffset = {se_offset6} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "c1 = Central_merged_with_outlier['log_Price_airbnb_original']\n",
    "c2 = Central_merged_with_outlier['log_Price_airbnb_cal']\n",
    "c3 = Central_merged_with_outlier['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "c_rs     = [crosscorr(c1,c3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "c_offset = np.ceil(len(c_rs)/2)-np.argmax(c_rs)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(c_rs)\n",
    "ax.axvline(np.ceil(len(c_rs)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(c_rs),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in Central London in OLT \\nOffset = {c_offset} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "c_rs1     = [crosscorr(c2,c3,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "c_offset1 = np.ceil(len(c_rs1)/2)-np.argmax(c_rs1)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(c_rs1)\n",
    "ax.axvline(np.ceil(len(c_rs1)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(c_rs1),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in Central Londonin OLT \\nOffset = {c_offset1} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "c5 = Central_merged['log_Price_airbnb_original']\n",
    "c6 = Central_merged['log_Price_airbnb_cal']\n",
    "c7 = Central_merged['log_Price_house']\n",
    "\n",
    "years  = 1\n",
    "fps    = 50\n",
    "\n",
    "c_rs5     = [crosscorr(c5,c7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "c_offset5 = np.ceil(len(c_rs5)/2)-np.argmax(c_rs5)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(c_rs5)\n",
    "ax.axvline(np.ceil(len(c_rs5)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(c_rs5),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Original) vs House Price in Central London in ORLT \\nOffset = {c_offset5} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "c_rs6     = [crosscorr(c6,c7,lag) for lag in range(-int(years*fps),int(years*fps+1))]\n",
    "c_offset6 = np.ceil(len(c_rs6)/2)-np.argmax(c_rs6)\n",
    "\n",
    "f,ax = plt.subplots(figsize=(14,3))\n",
    "ax.plot(c_rs6)\n",
    "ax.axvline(np.ceil(len(c_rs6)/2),color='k',linestyle='--',label='Center')\n",
    "ax.axvline(np.argmax(c_rs6),color='r',linestyle='--',label='Peak synchrony')\n",
    "ax.set(title=f'Airbnb Price (Calculated) vs House Price in Central London in ORLT \\nOffset = {c_offset6} frames\\nD1 leads <> D2 leads',\n",
    "       ylim=[-.2,1],xlim=[0,101],xlabel='Offset',ylabel='Pearson r')\n",
    "ax.set_xticks([0, 20, 40, 51, 61, 81, 101])\n",
    "ax.set_xticklabels([-50, -30, -10, 0, 10, 30, 50]);\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "#Regression Models\n",
    "#A simple linear regression will be build first using the most correlated column: OALP from OLT. \n",
    "#Set Postcode as the index for the dataframe to allow visualisation of each postcode district\n",
    "merged2 = merged1.set_index('Postcode')\n",
    "merged_with_outlier1 = merged_with_outlier.set_index('Postcode')\n",
    "\n",
    "#Set depedent (X) and independent (y) variables\n",
    "X = pd.DataFrame(merged_with_outlier1['log_Price_house'])\n",
    "y = pd.DataFrame(merged_with_outlier1['log_Price_airbnb_original'])\n",
    "\n",
    "#First try the simple linear regression model \n",
    "lm = sm.OLS(X,y).fit()\n",
    "linear_predictions = lm.predict()\n",
    "\n",
    "lm.summary()\n",
    "\n",
    "print(lm.params)\n",
    "\n",
    "#Calculating dependent variable values from parameters directly\n",
    "Dep_value  = merged_with_outlier1['log_Price_airbnb_original']*lm.params['log_Price_airbnb_original']\n",
    "Dep_value_predict = linear_predictions\n",
    "\n",
    "#Calculate the residuals 3 ways\n",
    "residuals_direct  = merged_with_outlier1['log_Price_house']-Dep_value\n",
    "residuals_predict = merged_with_outlier1['log_Price_house']-Dep_value_predict\n",
    "residuals_fromlib = lm.resid\n",
    "\n",
    "f, ax = plt.subplots(1, 3)\n",
    "ax[0].set_title(\"Residuals \\n(direct)\")\n",
    "ax[0].hist(residuals_direct,20)\n",
    "ax[1].set_title(\"Residuals \\n(predict)\")\n",
    "ax[1].hist(residuals_predict,20)\n",
    "ax[2].set_title(\"Residuals \\n(from residuals)\")\n",
    "ax[2].hist(residuals_fromlib,20)\n",
    "plt.tight_layout()\n",
    "\n",
    "f,ax = plt.subplots(figsize=(12,8))\n",
    "f = sm.graphics.influence_plot(lm,ax=ax,criterion='cooks')\n",
    "\n",
    "print(\"R-squared:\",lm.rsquared)\n",
    "print(\"MSE model:\",lm.mse_model)\n",
    "print(\"MSE residuals:\",lm.mse_resid)\n",
    "print(\"MSE total:\",lm.mse_total)\n",
    "\n",
    "#Drop the outliers in W1D\n",
    "Xa = X.drop('W1D')\n",
    "ya = y.drop('W1D')\n",
    "\n",
    "lm_a = sm.OLS(Xa,ya).fit()\n",
    "linear_predictions_a = lm_a.predict()\n",
    "\n",
    "lm_a.summary()\n",
    "\n",
    "print(lm_a.params)\n",
    "\n",
    "print(\"R-squared:\",lm_a.rsquared)\n",
    "print(\"MSE model:\",lm_a.mse_model)\n",
    "print(\"MSE residuals:\",lm_a.mse_resid)\n",
    "print(\"MSE total:\",lm_a.mse_total)\n",
    "\n",
    "#10-fold cross-validation linear regression model \n",
    "model  = linear_model.LinearRegression()\n",
    "scores = []\n",
    "rmse   = []\n",
    "kfold  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold.split(X,y)):\n",
    "    model.fit(X.iloc[train,:],y.iloc[train,:])\n",
    "    prediction = model.predict(X.iloc[test,:])\n",
    "    score = r2_score(y.iloc[test,:],prediction)\n",
    "    scores.append(score)\n",
    "    test_rmse = (np.sqrt(mean_squared_error(y.iloc[test,:],prediction)))\n",
    "    rmse.append(test_rmse)\n",
    "    \n",
    "print(scores)\n",
    "print(sum(scores)/len(scores))\n",
    "print(rmse)\n",
    "print(sum(rmse)/len(rmse))\n",
    "\n",
    "#A MLRM will be build using both OALP and CALP and see if results will improve. \n",
    "#Set depedent (X) and independent (y) variables\n",
    "X1 = merged_with_outlier1['log_Price_house'];\n",
    "y1 = sm.add_constant(merged_with_outlier1[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "lm1 = sm.OLS(X1,y1).fit()\n",
    "linear_predictions1 = lm1.predict()\n",
    "\n",
    "lm1.summary()\n",
    "\n",
    "f,ax = plt.subplots(figsize=(12,8))\n",
    "f = sm.graphics.influence_plot(lm1,ax=ax,criterion='cooks')\n",
    "\n",
    "print(lm1.params)\n",
    "\n",
    "#Calculating dependent variable values from parameters directly\n",
    "Dep_value1  = merged_with_outlier1['log_Price_airbnb_original']*lm1.params['log_Price_airbnb_original']+merged_with_outlier1['log_Price_airbnb_cal']*lm1.params['log_Price_airbnb_cal']+lm1.params['const']\n",
    "Dep_value_predict1 = linear_predictions1\n",
    "\n",
    "#Calculate the residuals 3 ways\n",
    "residuals_direct1  = merged_with_outlier1['log_Price_house']-Dep_value1\n",
    "residuals_predict1 = merged_with_outlier1['log_Price_house']-Dep_value_predict1\n",
    "residuals_fromlib1 = lm1.resid\n",
    "\n",
    "f, ax = plt.subplots(1, 3)\n",
    "ax[0].set_title(\"Residuals \\n(direct)\")\n",
    "ax[0].hist(np.isfinite(residuals_direct1),20)\n",
    "ax[1].set_title(\"Residuals \\n(predict)\")\n",
    "ax[1].hist(residuals_predict1,20)\n",
    "ax[2].set_title(\"Residuals \\n(from residuals)\")\n",
    "ax[2].hist(residuals_fromlib1,20)\n",
    "plt.tight_layout()\n",
    "\n",
    "residuals_direct_mean  = residuals_direct1.mean()\n",
    "residuals_predict_mean = residuals_predict1.mean()\n",
    "residuals_fromlib_mean = residuals_fromlib1.mean()\n",
    "\n",
    "print(residuals_direct_mean,residuals_predict_mean,residuals_fromlib_mean)\n",
    "\n",
    "residuals_direct_sum  = residuals_direct1.sum()\n",
    "residuals_predict_sum = residuals_predict1.sum()\n",
    "residuals_fromlib_sum = residuals_fromlib1.sum()\n",
    "\n",
    "print(residuals_direct_sum,residuals_predict_sum,residuals_fromlib_sum)\n",
    "\n",
    "#create instance of influence\n",
    "influence = lm1.get_influence()\n",
    "\n",
    "#leverage (hat values)\n",
    "leverage = influence.hat_matrix_diag\n",
    "\n",
    "#Cook's D values (and p-values) as tuple of arrays\n",
    "cooks_d = influence.cooks_distance\n",
    "\n",
    "#standardized residuals\n",
    "studentised_residuals_int = influence.resid_studentized_internal\n",
    "\n",
    "#studentized residuals\n",
    "studentised_residuals_ext = influence.resid_studentized_external\n",
    "\n",
    "print(studentised_residuals_int.mean(),studentised_residuals_int.sum(),studentised_residuals_ext.mean(),studentised_residuals_ext.sum())\n",
    "\n",
    "#Plot the regression plot \n",
    "sns.regplot(x=X1,y=linear_predictions1)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model')\n",
    "\n",
    "#Plot the residual plot \n",
    "sns.residplot(X1,linear_predictions1)\n",
    "plt.title('Residual Plot of the Multiple Linear Regression Model')\n",
    "\n",
    "#Apply exponential transform the the price house to allow interpretaion\n",
    "exp_linear_predictions1 = np.expm1(linear_predictions1)\n",
    "\n",
    "#Plot the regression plot with exponential transformed house price\n",
    "sns.regplot(x=X1,y=exp_linear_predictions1)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model \\n with Reverse Log Transformation')\n",
    "\n",
    "print(\"R-squared:\",lm1.rsquared)\n",
    "print(\"MSE model:\",lm1.mse_model)\n",
    "print(\"MSE residuals:\",lm1.mse_resid)\n",
    "print(\"MSE total:\",lm1.mse_total)\n",
    "\n",
    "#Drop the outliers of E12 which has more leverage than W1D\n",
    "X1 = merged_with_outlier1['log_Price_house'];\n",
    "y1 = sm.add_constant(merged_with_outlier1[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "Xb = X1.drop('E12')\n",
    "yb = y1.drop('E12')\n",
    "\n",
    "lm_b = sm.OLS(Xb,yb).fit()\n",
    "linear_predictions_b = lm_b.predict()\n",
    "\n",
    "lm_b.summary()\n",
    "\n",
    "print(\"R-squared:\",lm_b.rsquared)\n",
    "print(\"MSE model:\",lm_b.mse_model)\n",
    "print(\"MSE residuals:\",lm_b.mse_resid)\n",
    "print(\"MSE total:\",lm_b.mse_total)\n",
    "\n",
    "#10-fold cross-validated mulitple regression model \n",
    "X1 = np.asarray(merged_with_outlier1['log_Price_house']).reshape(-1,1)\n",
    "y1 = sm.add_constant(merged_with_outlier1[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "model1  = linear_model.LinearRegression()\n",
    "scores1 = []\n",
    "rmse1   = []\n",
    "kfold  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold.split(X1,y1)):\n",
    "    model1.fit(X1[train,:],y1.iloc[train,:])\n",
    "    prediction1 = model1.predict(X1[test,:])\n",
    "    score1 = r2_score(y1.iloc[test,:],prediction1)\n",
    "    scores1.append(score1)\n",
    "    test_rmse1 = (np.sqrt(mean_squared_error(y1.iloc[test,:],prediction1)))\n",
    "    rmse1.append(test_rmse1)\n",
    "    \n",
    "print(scores1)\n",
    "print(sum(scores1)/len(scores1))\n",
    "print(rmse1)\n",
    "print(sum(rmse1)/len(rmse1))\n",
    "\n",
    "#Set dependent (X) and independent (y) variables\n",
    "X2 = merged2['log_Price_house'];\n",
    "y2 = sm.add_constant(merged2[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "lm2 = sm.OLS(X2,y2).fit()\n",
    "linear_predictions2 = lm2.predict()\n",
    "\n",
    "lm2.summary()\n",
    "\n",
    "f,ax = plt.subplots(figsize=(12,8))\n",
    "f = sm.graphics.influence_plot(lm2,ax=ax,criterion='cooks')\n",
    "\n",
    "print(lm2.params)\n",
    "\n",
    "#Calculating dependent variable values from parameters directly\n",
    "Dep_value2  = merged2['log_Price_airbnb_original']*lm1.params['log_Price_airbnb_original']+merged2['log_Price_airbnb_cal']*lm1.params['log_Price_airbnb_cal']+lm1.params['const']\n",
    "Dep_value_predict2 = linear_predictions2\n",
    "\n",
    "#Calculate the residuals 3 ways\n",
    "residuals_direct2  = merged2['log_Price_house']-Dep_value2\n",
    "residuals_predict2 = merged2['log_Price_house']-Dep_value_predict2\n",
    "residuals_fromlib2 = lm2.resid\n",
    "\n",
    "f, ax = plt.subplots(1, 3)\n",
    "ax[0].set_title(\"Residuals \\n(direct)\")\n",
    "ax[0].hist(residuals_direct2,20)\n",
    "ax[1].set_title(\"Residuals \\n(predict)\")\n",
    "ax[1].hist(residuals_predict2,20)\n",
    "ax[2].set_title(\"Residuals \\n(from residuals)\")\n",
    "ax[2].hist(residuals_fromlib2,20)\n",
    "plt.tight_layout()\n",
    "\n",
    "residuals_direct_mean1  = residuals_direct2.mean()\n",
    "residuals_predict_mean1 = residuals_predict2.mean()\n",
    "residuals_fromlib_mean1 = residuals_fromlib2.mean()\n",
    "\n",
    "print(residuals_direct_mean1,residuals_predict_mean1,residuals_fromlib_mean1)\n",
    "\n",
    "residuals_direct_sum1  = residuals_direct2.sum()\n",
    "residuals_predict_sum1 = residuals_predict2.sum()\n",
    "residuals_fromlib_sum1 = residuals_fromlib2.sum()\n",
    "\n",
    "print(residuals_direct_sum1,residuals_predict_sum1,residuals_fromlib_sum1)\n",
    "#create instance of influence\n",
    "influence1 = lm2.get_influence()\n",
    "\n",
    "#leverage (hat values)\n",
    "leverage1 = influence1.hat_matrix_diag\n",
    "\n",
    "#Cook's D values (and p-values) as tuple of arrays\n",
    "cooks_d1 = influence1.cooks_distance\n",
    "\n",
    "#standardized residuals\n",
    "studentised_residuals_int1 = influence1.resid_studentized_internal\n",
    "\n",
    "#studentized residuals\n",
    "studentised_residuals_ext1 = influence1.resid_studentized_external\n",
    "\n",
    "print(studentised_residuals_int1.mean(),studentised_residuals_int1.sum(),studentised_residuals_ext1.mean(),studentised_residuals_ext1.sum())\n",
    "\n",
    "#Plot the regression plot\n",
    "sns.regplot(x=X2,y=linear_predictions2)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model')\n",
    "\n",
    "#Plot the residual plot\n",
    "sns.residplot(X2,linear_predictions2)\n",
    "plt.title('Residual Plot of the Multiple Linear Regression Model')\n",
    "\n",
    "#Exponentially transform the house prices\n",
    "exp_linear_predictions2 = np.expm1(linear_predictions2)\n",
    "\n",
    "#Plot the regression plot with exponentially transformed house prices\n",
    "sns.regplot(x=X2,y=exp_linear_predictions2)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model \\n with Reverse Log Transformation')\n",
    "\n",
    "print(\"R-squared:\",lm2.rsquared)\n",
    "print(\"MSE model:\",lm2.mse_model)\n",
    "print(\"MSE residuals:\",lm2.mse_resid)\n",
    "print(\"MSE total:\",lm2.mse_total)\n",
    "\n",
    "#10-fold cross-validated multiple regression model \n",
    "X2 = np.asarray(merged2['log_Price_house']).reshape(-1,1)\n",
    "y2 = sm.add_constant(merged2[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "model2  = linear_model.LinearRegression()\n",
    "scores = []\n",
    "rmse   = []\n",
    "kfold  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold.split(X2,y2)):\n",
    "    model.fit(X2[train,:],y2.iloc[train,:])\n",
    "    prediction = model.predict(X2[test,:])\n",
    "    score = r2_score(y2.iloc[test,:],prediction)\n",
    "    scores.append(score)\n",
    "    test_rmse = (np.sqrt(mean_squared_error(y2.iloc[test,:],prediction)))\n",
    "    rmse.append(test_rmse)\n",
    "    \n",
    "print(scores)\n",
    "print(sum(scores)/len(scores))\n",
    "print(rmse)\n",
    "print(sum(rmse)/len(rmse))\n",
    "\n",
    "#Therefore, ORLT will be used to build regression models for each postcode districts\n",
    "Xe = East_merged['log_Price_house']\n",
    "ye = sm.add_constant(East_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "lm_e = sm.OLS(Xe,ye).fit()\n",
    "linear_predictions_e = lm_e.predict()\n",
    "\n",
    "lm_e.summary()\n",
    "\n",
    "Xe = np.asarray(East_merged['log_Price_house']).reshape(-1,1)\n",
    "ye = sm.add_constant(East_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "model_e  = linear_model.LinearRegression()\n",
    "scores_e = []\n",
    "rmse_e   = []\n",
    "kfold_e  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold.split(Xe,ye)):\n",
    "    model_e.fit(Xe[train,:],ye.iloc[train,:])\n",
    "    prediction_e = model_e.predict(Xe[test,:])\n",
    "    score_e = r2_score(ye.iloc[test,:],prediction_e)\n",
    "    scores_e.append(score_e)\n",
    "    test_rmse_e = (np.sqrt(mean_squared_error(ye.iloc[test,:],prediction_e)))\n",
    "    rmse_e.append(test_rmse_e)\n",
    "    \n",
    "print(sum(scores_e)/len(scores))\n",
    "print(sum(rmse_e)/len(rmse))\n",
    "\n",
    "exp_linear_predictions_e = np.expm1(linear_predictions_e)\n",
    "\n",
    "sns.regplot(x=Xe,y=exp_linear_predictions_e)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model \\n in East London')\n",
    "\n",
    "Xn = North_merged['log_Price_house']\n",
    "yn = sm.add_constant(North_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "lm_n = sm.OLS(Xn,yn).fit()\n",
    "linear_predictions_n = lm_n.predict()\n",
    "\n",
    "lm_n.summary()\n",
    "\n",
    "Xn = np.array(North_merged['log_Price_house']).reshape(-1,1)\n",
    "yn = sm.add_constant(North_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "model_n  = linear_model.LinearRegression()\n",
    "scores_n = []\n",
    "rmse_n   = []\n",
    "kfold_n  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold_n.split(Xn,yn)):\n",
    "    model_n.fit(Xn[train,:],yn.iloc[train,:])\n",
    "    prediction_n = model_n.predict(Xn[test,:])\n",
    "    score_n = r2_score(yn.iloc[test,:],prediction_n)\n",
    "    scores_n.append(score_n)\n",
    "    test_rmse_n = (np.sqrt(mean_squared_error(yn.iloc[test,:],prediction_n)))\n",
    "    rmse_n.append(test_rmse_n)\n",
    "    \n",
    "print(sum(scores_n)/len(scores_n))\n",
    "print(sum(rmse_n)/len(rmse_n))\n",
    "\n",
    "exp_linear_predictions_n = np.expm1(linear_predictions_n)\n",
    "\n",
    "sns.regplot(x=Xn,y=exp_linear_predictions_n)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model \\n in North London')\n",
    "\n",
    "Xc = Central_merged['log_Price_house'];\n",
    "yc = sm.add_constant(Central_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "lm_c = sm.OLS(Xc,yc).fit()\n",
    "linear_predictions_c = lm_c.predict()\n",
    "\n",
    "lm_c.summary()\n",
    "\n",
    "Xc = np.asarray(Central_merged['log_Price_house']).reshape(-1,1)\n",
    "yc = sm.add_constant(Central_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "model_c  = linear_model.LinearRegression()\n",
    "scores_c = []\n",
    "rmse_c   = []\n",
    "kfold_c  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold_c.split(Xc,yc)):\n",
    "    model_c.fit(Xc[train,:],yc.iloc[train,:])\n",
    "    prediction_c = model_c.predict(Xc[test,:])\n",
    "    score_c = r2_score(yc.iloc[test,:],prediction_c)\n",
    "    scores_c.append(score_c)\n",
    "    test_rmse_c = (np.sqrt(mean_squared_error(yc.iloc[test,:],prediction_c)))\n",
    "    rmse_c.append(test_rmse_c)\n",
    "    \n",
    "print(sum(scores_c)/len(scores_c))\n",
    "print(sum(rmse_c)/len(rmse_c))\n",
    "\n",
    "exp_linear_predictions_c = np.expm1(linear_predictions_c)\n",
    "\n",
    "sns.regplot(x=Xc,y=exp_linear_predictions_c)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model \\n in Central London')\n",
    "\n",
    "Xw = West_merged['log_Price_house'];\n",
    "yw = sm.add_constant(West_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "lm_w = sm.OLS(Xw,yw).fit()\n",
    "linear_predictions_w = lm_w.predict()\n",
    "\n",
    "lm_w.summary()\n",
    "\n",
    "Xw = np.asarray(West_merged['log_Price_house']).reshape(-1,1)\n",
    "yw = sm.add_constant(West_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "model_w  = linear_model.LinearRegression()\n",
    "scores_w = []\n",
    "rmse_w   = []\n",
    "kfold_w  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold_w.split(Xw,yw)):\n",
    "    model_w.fit(Xw[train,:],yw.iloc[train,:])\n",
    "    prediction_w = model_w.predict(Xw[test,:])\n",
    "    score_w = r2_score(yw.iloc[test,:],prediction_w)\n",
    "    scores_w.append(score_w)\n",
    "    test_rmse_w = (np.sqrt(mean_squared_error(yw.iloc[test,:],prediction_w)))\n",
    "    rmse_w.append(test_rmse_w)\n",
    "    \n",
    "print(sum(scores_w)/len(scores_w))\n",
    "print(sum(rmse_w)/len(rmse_w))\n",
    "\n",
    "exp_linear_predictions_w = np.expm1(linear_predictions_w)\n",
    "\n",
    "sns.regplot(x=Xw,y=exp_linear_predictions_w)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model \\n in West London')\n",
    "\n",
    "Xnw = North_West_merged['log_Price_house'];\n",
    "ynw = sm.add_constant(North_West_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "lm_nw = sm.OLS(Xnw,ynw).fit()\n",
    "linear_predictions_nw = lm_nw.predict()\n",
    "\n",
    "lm_nw.summary()\n",
    "\n",
    "Xnw = np.asarray(North_West_merged['log_Price_house']).reshape(-1,1)\n",
    "ynw = sm.add_constant(North_West_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "model_nw  = linear_model.LinearRegression()\n",
    "scores_nw = []\n",
    "rmse_nw   = []\n",
    "kfold_nw  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold_nw.split(Xnw,ynw)):\n",
    "    model_nw.fit(Xnw[train,:],ynw.iloc[train,:])\n",
    "    prediction_nw = model_nw.predict(Xnw[test,:])\n",
    "    score_nw = r2_score(ynw.iloc[test,:],prediction_nw)\n",
    "    scores_nw.append(score_nw)\n",
    "    test_rmse_nw = (np.sqrt(mean_squared_error(ynw.iloc[test,:],prediction_nw)))\n",
    "    rmse_nw.append(test_rmse_nw)\n",
    "    \n",
    "print(sum(scores_nw)/len(scores_nw))\n",
    "print(sum(rmse_nw)/len(rmse_nw))\n",
    "\n",
    "exp_linear_predictions_nw = np.expm1(linear_predictions_nw)\n",
    "\n",
    "sns.regplot(x=Xnw,y=exp_linear_predictions_nw)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model \\n in North West London')\n",
    "\n",
    "Xsw = South_West_merged['log_Price_house'];\n",
    "ysw = sm.add_constant(South_West_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "lm_sw = sm.OLS(Xsw,ysw).fit()\n",
    "linear_predictions_sw = lm_sw.predict()\n",
    "\n",
    "lm_sw.summary()\n",
    "\n",
    "Xsw = np.asarray(South_West_merged['log_Price_house']).reshape(-1,1)\n",
    "ysw = sm.add_constant(South_West_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "model_sw  = linear_model.LinearRegression()\n",
    "scores_sw = []\n",
    "rmse_sw   = []\n",
    "kfold_sw  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold_sw.split(Xsw,ysw)):\n",
    "    model_sw.fit(Xsw[train,:],ysw.iloc[train,:])\n",
    "    prediction_sw = model_sw.predict(Xsw[test,:])\n",
    "    score_sw = r2_score(ysw.iloc[test,:],prediction_sw)\n",
    "    scores_sw.append(score_sw)\n",
    "    test_rmse_sw = (np.sqrt(mean_squared_error(ysw.iloc[test,:],prediction_sw)))\n",
    "    rmse_sw.append(test_rmse_sw)\n",
    "    \n",
    "print(sum(scores_sw)/len(scores_sw))\n",
    "print(sum(rmse_sw)/len(rmse_sw))\n",
    "\n",
    "exp_linear_predictions_sw = np.expm1(linear_predictions_sw)\n",
    "\n",
    "sns.regplot(x=Xw,y=exp_linear_predictions_w)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model \\n in South West London')\n",
    "\n",
    "Xse = South_East_merged['log_Price_house'];\n",
    "yse = sm.add_constant(South_East_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "lm_se = sm.OLS(Xse,yse).fit()\n",
    "linear_predictions_se = lm_se.predict()\n",
    "\n",
    "lm_se.summary()\n",
    "\n",
    "Xse = np.asarray(South_East_merged['log_Price_house']).reshape(-1,1)\n",
    "yse = sm.add_constant(South_East_merged[['log_Price_airbnb_original','log_Price_airbnb_cal']])\n",
    "\n",
    "model_se  = linear_model.LinearRegression()\n",
    "scores_se = []\n",
    "rmse_se   = []\n",
    "kfold_se  = KFold(n_splits=10,shuffle=True,random_state=42)\n",
    "\n",
    "for i ,(train,test) in enumerate(kfold_se.split(Xse,yse)):\n",
    "    model_se.fit(Xse[train,:],yse.iloc[train,:])\n",
    "    prediction_se = model_se.predict(Xse[test,:])\n",
    "    score_se = r2_score(yse.iloc[test,:],prediction_se)\n",
    "    scores_se.append(score_se)\n",
    "    test_rmse_se = (np.sqrt(mean_squared_error(yse.iloc[test,:],prediction_se)))\n",
    "    rmse_se.append(test_rmse_se)\n",
    "    \n",
    "print(sum(scores_se)/len(scores_se))\n",
    "print(sum(rmse_se)/len(rmse_se))\n",
    "\n",
    "exp_linear_predictions_se = np.expm1(linear_predictions_se)\n",
    "\n",
    "sns.regplot(x=Xse,y=exp_linear_predictions_se)\n",
    "plt.title('Regression plot of the Multiple Linear Regression Model \\n in South East London')\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
